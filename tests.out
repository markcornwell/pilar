Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing error handlers for vector primitives tests ...
test 0:(make-vector #t) ... ok
test 1:(vector-length 43) ... ok
test 2:(make-vector -1) ... ok
test 3:(vector-length (make-vector 1)) ... ok
test 4:(vector-length (make-vector 666)) ... ok
test 5:(vector-set! (make-vector 1) 1 #t) ... ok
test 6:(let ((v (make-vector 1))) (vector-set! v 1 #t)) ... ok
test 7:(let ((v (make-vector 5))) (vector-set! v -1 42)) ... ok
test 8:(let ((v (make-vector 2))) (vector-set! v #f 3)) ... ok
test 9:(let ((v (make-vector 1))) (vector-ref v 1)) ... ok
test 10:(let ((v (make-vector 5))) (vector-ref v -4)) ... ok
test 11:(let ((v (make-vector 2))) (vector-ref v #\Z)) ... ok
test 12:(make-string #t) ... ok
test 13:(make-string -42) ... ok
test 14:(string-ref (make-string 2) 2) ... ok
test 15:(string-ref (make-string 2) -1) ... ok
test 16:(string-ref #t -1) ...> 
