Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing eof-object tests ...
test 0:42 ... ok
test 1:(eof-object? (eof-object)) ... ok
test 2:(null? (eof-object)) ... ok
test 3:(boolean? (eof-object)) ... ok
test 4:(string? (eof-object)) ... ok
test 5:(char? (eof-object)) ... ok
test 6:(pair? (eof-object)) ... ok
test 7:(symbol? (eof-object)) ... ok
test 8:(procedure? (eof-object)) ... ok
test 9:(vector? (eof-object)) ... ok
test 10:(not (eof-object)) ... ok
test 11:(eof-object? #\a) ... ok
test 12:(eof-object? #t) ... ok
test 13:(eof-object? 12) ... ok
test 14:(eof-object? (quote (1 2 3))) ... ok
test 15:(eof-object? (quote ())) ... ok
test 16:(eof-object? (lambda (x) x)) ... ok
test 17:(eof-object? (quote baz)) ... ok
Performing read-char tests ...
test 18:42 ... ok
test 19:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) 0)) ... ok
test 20:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) (let ((p (open-input-file "stst.tmp"))) (input-port? p)))) ... ok
test 21:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) (let ((p (open-input-file "stst.tmp"))) (fill-input-buffer p) 42))) ... ok
test 22:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) (let ((p (open-input-file "stst.tmp"))) (fill-input-buffer p) (port-ndx p)))) ... ok
test 23:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) (let ((p (open-input-file "stst.tmp"))) (fill-input-buffer p) (port-last p)))) ... ok
test 24:(begin (let ((p (open-output-file "stst.tmp"))) (display "Hello World!" p) (close-output-port p) (let ((p (open-input-file "stst.tmp"))) (read-char p)))) ...> 
