Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing procedure? tests ...
test 0:(procedure? (lambda (x) x)) ... ok
test 1:(let ((f (lambda (x) x))) (procedure? f)) ... ok
test 2:(procedure? (make-vector 0)) ... ok
test 3:(procedure? (make-string 0)) ... ok
test 4:(procedure? (cons 1 2)) ... ok
test 5:(procedure? #\S) ... ok
test 6:(procedure? ()) ... ok
test 7:(procedure? #t) ... ok
test 8:(procedure? #f) ... ok
test 9:(string? (lambda (x) x)) ... ok
test 10:(vector? (lambda (x) x)) ... ok
test 11:(boolean? (lambda (x) x)) ... ok
test 12:(null? (lambda (x) x)) ... ok
test 13:(not (lambda (x) x)) ... ok
Performing applying thunks tests ...
test 14:(let ((f (lambda () 12))) (f)) ... ok
test 15:(let ((f (lambda () (fx+ 12 13)))) (f)) ... ok
test 16:(let ((f (lambda () 13))) (fx+ (f) (f))) ... ok
test 17:(let ((f (lambda () (let ((g (lambda () (fx+ 2 3)))) (fx* (g) (g)))))) (fx+ (f) (f))) ... ok
test 18:(let ((f (lambda () (let ((f (lambda () (fx+ 2 3)))) (fx* (f) (f)))))) (fx+ (f) (f))) ... ok
test 19:(let ((f (if (boolean? (lambda () 12)) (lambda () 13) (lambda () 14)))) (f)) ... ok
Performing parameter passing tests ...
test 20:(let ((f (lambda (x) x))) (f 12)) ... ok
test 21:(let ((f (lambda (x y) (fx+ x y)))) (f 12 13)) ... ok
test 22:(let ((f (lambda (z) (let ((g (lambda (x y) (fx+ x y)))) (g z 100))))) (f 1002)) ... ok
test 23:(let ((f (lambda (x) (let ((g (lambda (x y) (fx+ x y)))) (g x 100))))) (f 1001)) ... ok
test 24:(let ((f (lambda (x) (let ((g (lambda (x y) (fx+ x y)))) (g x 100))))) (f 1000)) ... ok
test 25:(let ((f (lambda (g) (g 2 13)))) (f (lambda (n m) (fx* n m)))) ... ok
test 26:(let ((f (lambda (g) (fx+ (g 10) (g 100))))) (f (lambda (x) (fx* x x)))) ... ok
test 27:(let ((f (lambda (f n m) (if (fxzero? n) m (f f (fxsub1 n) (fx* n m)))))) (f f 5 1)) ... ok
test 28:(let ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f f (fxsub1 n))))))) (f f 5)) ... ok
Performing closures tests ...
test 29:(let ((n 12)) (let ((f (lambda () n))) (f))) ... ok
test 30:(let ((n 12)) (let ((f (lambda (m) (fx+ n m)))) (f 100))) ... ok
test 31:(let ((f (lambda (f n m) (if (fxzero? n) m (f (fxsub1 n) (fx* n m)))))) (let ((g (lambda (g n m) (f (lambda (n m) (g g n m)) n m)))) (g g 5 1))) ... ok
test 32:(let ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f (fxsub1 n))))))) (let ((g (lambda (g n) (f (lambda (n) (g g n)) n)))) (g g 5))) ... ok
Performing begin/implicit-begin tests ...
test 33:(begin 12) ... ok
test 34:(begin 13 122) ... ok
test 35:(begin 123 2343 #t) ... ok
test 36:(let ((t (begin 12 (cons 1 2)))) (begin t t)) ... ok
test 37:(let ((t (begin 13 (cons 1 2)))) (cons 1 t) t) ... ok
test 38:(let ((t (cons 1 2))) (if (pair? t) (begin t) 12)) ... ok
Performing set-car! set-cdr! tests ...
test 39:(let ((x (cons 1 2))) (begin (set-cdr! x ()) x)) ... ok
test 40:(let ((x (cons 1 2))) (set-cdr! x ()) x) ... ok
test 41:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! x y) x) ... ok
test 42:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! y x) y) ... ok
test 43:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! y x) x) ... ok
test 44:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! x y) y) ... ok
test 45:(let ((x (let ((x (cons 1 2))) (set-car! x #t) (set-cdr! x #f) x))) (cons x x) x) ... ok
test 46:(let ((x (cons 1 2))) (set-cdr! x x) (set-car! (cdr x) x) (cons (eq? x (car x)) (eq? x (cdr x)))) ... ok
test 47:(let ((x #f)) (if (pair? x) (set-car! x 12) #f) x) ... ok
test 48:(let ((x #f)) (if (pair? #f) (set-car! #f 12) #f) x) ... ok
Performing eq? tests ...
test 49:(eq? 1 1) ... ok
test 50:(eq? 1 2) ... ok
test 51:(eq? #t 2) ... ok
test 52:(eq? #t #t) ... ok
test 53:(eq? () ()) ... ok
test 54:(eq? (cons 1 2) (cons 1 2)) ... ok
test 55:(let ((v (cons 1 2))) (eq? v v)) ... ok
Performing vectors tests ...
test 56:(vector? (make-vector 0)) ... ok
test 57:(vector-length (make-vector 12)) ... ok
test 58:(vector? (cons 1 2)) ... ok
test 59:(vector? 1287) ... ok
test 60:(vector? ()) ... ok
test 61:(vector? #t) ... ok
test 62:(vector? #f) ... ok
test 63:(pair? (make-vector 12)) ... ok
test 64:(null? (make-vector 12)) ... ok
test 65:(boolean? (make-vector 12)) ... ok
test 66:(make-vector 0) ... ok
test 67:(let ((v (make-vector 1))) (vector-set! v 0 #t) v) ... ok
test 68:(let ((v (make-vector 2))) (vector-set! v 0 #t) (vector-set! v 1 #f) v) ... ok
test 69:(let ((v (make-vector 2))) (vector-set! v 0 v) (vector-set! v 1 v) (eq? (vector-ref v 0) (vector-ref v 1))) ... ok
test 70:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (eq? y (vector-ref v 0))) ... ok
test 71:(cons 1 2) ... ok
test 72:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (pair? w)) ... ok
test 73:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (and (pair? w) (pair? (car w)))) ... ok
test 74:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (cdr w)) ... ok
test 75:(let ((w (let ((v (make-vector 1)) (y (cons 96 2))) y))) w) ... ok
test 76:(let ((w (let ((v (make-vector 1)) (y (cons 97 2))) (cons y (eq? y 0)) y))) w) ... ok
test 77:(let ((w (let ((v (make-vector 1)) (y (cons 97 3))) (vector-set! v 0 y) y))) w) ... ok
test 78:(let ((w (let ((v (make-vector 1)) (y (cons 98 2))) (vector-set! v 0 y) (cons y (eq? y 0)) y))) w) ... ok
test 79:(let ((w (let ((v (make-vector 1)) (y (cons 99 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (car w)) ... ok
test 80:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (eq? (car (car w)) 1)) ... ok
test 81:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (and (eq? (car (car w)) 1) (eq? (cdr (car w)) 2) (eq? (cdr w) #f))) ... ok
test 82:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))) ... ok
test 83:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y (vector-ref v 0)))) ... ok
test 84:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector? v1))) ... ok
test 85:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (and (vector? v0) (vector? v1)))) ... ok
test 86:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (and (vector? v0) (vector? v1)))) ... ok
test 87:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) v0)) ... ok
test 88:(vector-length (make-vector 1)) ... ok
test 89:(let ((v0 (make-vector 2))) (vector-length v0)) ... ok
test 90:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-length v0)) ... ok
test 91:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (vector-length v1))) ... ok
test 92:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) v1)) ... ok
test 93:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (car (cons v0 v1)))) ... ok
test 94:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cdr (cons v0 v1)))) ... ok
test 95:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (cons v0 ())) ... ok
test 96:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (cons #t v0)) ... ok
test 97:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cons v0 v1))) ... ok
test 98:(let ((v0 (make-vector 3))) (let ((v1 (make-vector 3))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v0 2 150) (vector-set! v1 0 300) (vector-set! v1 1 400) (vector-set! v1 2 350) (cons v0 v1))) ... ok
test 99:(let ((n 2)) (let ((v0 (make-vector n))) (let ((v1 (make-vector n))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cons v0 v1)))) ... ok
test 100:(let ((n 3)) (let ((v0 (make-vector n))) (let ((v1 (make-vector (vector-length v0)))) (vector-set! v0 (fx- (vector-length v0) 3) 100) (vector-set! v0 (fx- (vector-length v1) 2) 200) (vector-set! v0 (fx- (vector-length v0) 1) 150) (vector-set! v1 (fx- (vector-length v1) 3) 300) (vector-set! v1 (fx- (vector-length v0) 2) 400) (vector-set! v1 (fx- (vector-length v1) 1) 350) (cons v0 v1)))) ... ok
test 101:(let ((n 1)) (vector-set! (make-vector n) (fxsub1 n) (fx* n n)) n) ... ok
test 102:(let ((n 1)) (let ((v (make-vector 1))) (vector-set! v (fxsub1 n) n) (vector-ref v (fxsub1 n)))) ... ok
test 103:(let ((v0 (make-vector 1))) (vector-set! v0 0 1) (let ((v1 (make-vector 1))) (vector-set! v1 0 13) (vector-set! (if (vector? v0) v0 v1) (fxsub1 (vector-length (if (vector? v0) v0 v1))) (fxadd1 (vector-ref (if (vector? v0) v0 v1) (fxsub1 (vector-length (if (vector? v0) v0 v1)))))) (cons v0 v1))) ... ok
Performing strings tests ...
test 104:(make-string 0) ... ok
test 105:(string? (make-string 0)) ... ok
test 106:(let ((s (make-string 1))) (string-set! s 0 #\a) (string-ref s 0)) ... ok
test 107:(let ((s (make-string 2))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-ref s 1)) ... ok
test 108:(let ((s (make-string 3))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-ref s 2)) ... ok
test 109:(let ((s (make-string 4))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-set! s 3 #\d) (string-ref s 3)) ... ok
test 110:(let ((s (make-string 5))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-set! s 3 #\d) (string-set! s 4 #\e) (string-ref s 3)) ... ok
test 111:(cons 1 2) ... ok
test 112:(cons (make-string 0) ()) ... ok
test 113:(let ((s (make-string 2))) (string-set! s 0 #\a) (string-set! s 1 #\b) (cons (string-ref s 0) (string-ref s 1))) ... ok
test 114:(let ((i 0)) (let ((s (make-string 1))) (string-set! s i #\a) (string-ref s i))) ... ok
test 115:(let ((i 0) (j 1)) (let ((s (make-string 2))) (string-set! s i #\a) (string-set! s j #\b) (string-ref s i))) ... ok
test 116:(let ((i 0) (j 1)) (let ((s (make-string 2))) (string-set! s i #\a) (string-set! s j #\b) (cons (string-ref s i) (string-ref s j)))) ... ok
test 117:(let ((i 0) (c #\a)) (let ((s (make-string 1))) (string-set! s i c) (string-ref s i))) ... ok
test 118:(string-length (make-string 12)) ... ok
test 119:(string? (make-vector 12)) ... ok
test 120:(string? (cons 1 2)) ... ok
test 121:(string? 1287) ... ok
test 122:(string? ()) ... ok
test 123:(string? #t) ... ok
test 124:(string? #f) ... ok
test 125:(pair? (make-string 12)) ... ok
test 126:(null? (make-string 12)) ... ok
test 127:(boolean? (make-string 12)) ... ok
test 128:(vector? (make-string 12)) ... ok
test 129:(make-string 0) ... ok
test 130:(let ((v (make-string 2))) (string-set! v 0 #\t) (string-set! v 1 #\f) v) ... ok
test 131:(let ((v (make-string 2))) (string-set! v 0 #\x) (string-set! v 1 #\x) (char=? (string-ref v 0) (string-ref v 1))) ... ok
test 132:(let ((v0 (make-string 3))) (let ((v1 (make-string 3))) (string-set! v0 0 #\a) (string-set! v0 1 #\b) (string-set! v0 2 #\c) (string-set! v1 0 #\d) (string-set! v1 1 #\e) (string-set! v1 2 #\f) (cons v0 v1))) ... ok
test 133:(let ((n 2)) (let ((v0 (make-string n))) (let ((v1 (make-string n))) (string-set! v0 0 #\a) (string-set! v0 1 #\b) (string-set! v1 0 #\c) (string-set! v1 1 #\d) (cons v0 v1)))) ... ok
test 134:(let ((n 1)) (string-set! (make-string n) (fxsub1 n) (fixnum->char 34)) n) ... ok
test 135:(let ((n 1)) (let ((v (make-string 1))) (string-set! v (fxsub1 n) (fixnum->char n)) (char->fixnum (string-ref v (fxsub1 n))))) ... ok
test 136:(let ((v0 (make-string 1))) (string-set! v0 0 #\a) (let ((v1 (make-string 1))) (string-set! v1 0 #\A) (string-set! (if (string? v0) v0 v1) (fxsub1 (string-length (if (string? v0) v0 v1))) (fixnum->char (fxadd1 (char->fixnum (string-ref (if (string? v0) v0 v1) (fxsub1 (string-length (if (string? v0) v0 v1)))))))) (cons v0 v1))) ... ok
test 137:(let ((s (make-string 1))) (string-set! s 0 #\") s) ... ok
test 138:(let ((s (make-string 1))) (string-set! s 0 #\\) s) ... ok
Performing cons tests ...
test 139:(fxadd1 0) ... ok
test 140:(pair? 12) ... ok
test 141:(pair? #t) ... ok
test 142:(pair? #f) ... ok
test 143:(pair? ()) ... ok
test 144:(cons 1 2) ... ok
test 145:(pair? (cons 1 2)) ... ok
test 146:(fixnum? (cons 12 43)) ... ok
test 147:(boolean? (cons 12 43)) ... ok
test 148:(null? (cons 12 43)) ... ok
test 149:(not (cons 12 43)) ... ok
test 150:(if (cons 12 43) 32 43) ... ok
test 151:(car (cons 1 23)) ... ok
test 152:(cdr (cons 43 123)) ... ok
test 153:(cons #t #f) ... ok
test 154:(car (cons #t #f)) ... ok
test 155:(cons 1 ()) ... ok
test 156:(cons 1 (cons 2 ())) ... ok
test 157:(cons (cons 12 3) (cons 45 6)) ... ok
test 158:(cons (cons 12 3) (cons #t #f)) ... ok
test 159:(car (car (cons (cons 12 3) (cons #t #f)))) ... ok
test 160:(cdr (car (cons (cons 12 3) (cons #t #f)))) ... ok
test 161:(car (cdr (cons (cons 12 3) (cons #t #f)))) ... ok
test 162:(cdr (cdr (cons (cons 12 3) (cons #t #f)))) ... ok
test 163:(cons 1 (cons 2 (cons 3 ()))) ... ok
test 164:(let ((x (let ((y (fx+ 1 2))) (fx* y y)))) (cons x (fx+ x x))) ... ok
test 165:(let ((t0 (cons 1 2)) (t1 (cons 3 4))) (let ((a0 (car t0)) (a1 (car t1)) (d0 (cdr t0)) (d1 (cdr t1))) (let ((t0 (cons a0 d1)) (t1 (cons a1 d0))) (cons t0 t1)))) ... ok
test 166:(let ((t (cons 1 2))) (let ((t t)) (let ((t t)) (let ((t t)) t)))) ... ok
test 167:(let ((t (let ((t (let ((t (let ((t (cons 1 2))) t))) t))) t))) t) ... ok
test 168:(let ((x ())) (let ((x (cons x x))) (let ((x (cons x x))) (let ((x (cons x x))) (cons x x))))) ... ok
test 169:(cons (let ((x #t)) (let ((y (cons x x))) (cons x y))) (cons (let ((x #f)) (let ((y (cons x x))) (cons y x))) ())) ... ok
Performing procedures tests ...
test 170:(letrec () 12) ... ok
test 171:(letrec () (let ((x 5)) (fx+ x x))) ... ok
test 172:(letrec ((f (lambda () 5))) 7) ... ok
test 173:(letrec ((f (lambda () 5))) (let ((x 12)) x)) ... ok
test 174:(letrec ((f (lambda () 5))) (app f)) ... ok
test 175:(letrec ((f (lambda () 5))) (f)) ... ok
test 176:(letrec ((f (lambda () 5))) (let ((x (f))) x)) ... ok
test 177:(letrec ((f (lambda () 5))) (fx+ 6 (app f))) ... ok
test 178:(letrec ((f (lambda () 5))) (fx+ (app f) 6)) ... ok
test 179:(letrec ((f (lambda () 5))) (fx+ (f) 6)) ... ok
test 180:(letrec ((f (lambda () 5))) (fx- 20 (f))) ... ok
test 181:(letrec ((f (lambda () 5))) (fx+ (f) (f))) ... ok
test 182:(letrec ((f (lambda () (fx+ 5 7))) (g (lambda () 13))) (fx+ (f) (g))) ... ok
test 183:(letrec ((f (lambda (x) (fx+ x 12)))) (f 13)) ... ok
test 184:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f 10))) ... ok
test 185:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f (f 0)))) ... ok
test 186:(letrec ((f (lambda (x y) (fx+ x y))) (g (lambda (x) (fx+ x 12)))) (f 16 (f (g 0) (fx+ 1 (g 0))))) ... ok
test 187:(letrec ((g (lambda (x y) (fx+ x y))) (f (lambda (x) (g x x)))) (f 12)) ... ok
test 188:(letrec ((f (lambda (x) (g x x))) (g (lambda (x y) (fx+ x y)))) (f 12)) ... ok
test 189:(let ((f (make-vector 1)) (g (make-vector 1))) (vector-set! f 0 (closure (x) (g) ((vector-ref g 0) x x))) (vector-set! g 0 (closure (x y) () (fx+ x y))) ((vector-ref f 0) 12)) ... ok
test 190:(letrec ((f (lambda (x) (if (fxzero? x) 1 (fx* x (f (fxsub1 x))))))) (f 5)) ... ok
test 191:(let ((f (make-vector 1))) (vector-set! f 0 (closure (x) (f) (if (fxzero? x) 1 (fx* x ((vector-ref f 0) (fxsub1 x)))))) ((vector-ref f 0) 5)) ... ok
test 192:(letrec ((e (lambda (x) (if (fxzero? x) #t (o (fxsub1 x))))) (o (lambda (x) (if (fxzero? x) #f (e (fxsub1 x)))))) (e 25)) ... ok
test 193:(let ((e (make-vector 1)) (o (make-vector 1))) (vector-set! e 0 (closure (x) (o) (if (fxzero? x) #t ((vector-ref o 0) (fxsub1 x))))) (vector-set! o 0 (closure (x) (e) (if (fxzero? x) #f ((vector-ref e 0) (fxsub1 x))))) ((vector-ref e 0) 25)) ... ok
Performing deeply nested procedures tests ...
test 194:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 10 0)) ... ok
test 195:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 100 0)) ... ok
test 196:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 1000 0)) ... ok
test 197:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 10000 0)) ... ok
test 198:(letrec ((e (lambda (x) (if (fxzero? x) #t (o (fxsub1 x))))) (o (lambda (x) (if (fxzero? x) #f (e (fxsub1 x)))))) (e 5)) ... ok
test 199:(letrec ((e (lambda (x) (if (fxzero? x) #t (o (fxsub1 x))))) (o (lambda (x) (if (fxzero? x) #f (e (fxsub1 x)))))) (e 5000000)) ... ok
Performing binary primitives tests ...
test 200:(fxlognot -7) ... ok
test 201:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 202:(fxlognot (fxlogor (fxlognot 7) (fxlognot 2))) ... ok
test 203:(fxlogand (fxlognot (fxlognot 12)) (fxlognot (fxlognot 12))) ... ok
test 204:(fx+ (fx+ 1 2) (fx+ 3 4)) ... ok
test 205:(fx+ (fx+ 1 2) (fx+ 3 -4)) ... ok
test 206:(fx+ (fx+ 1 2) (fx+ -3 4)) ... ok
test 207:(fx+ (fx+ 1 2) (fx+ -3 -4)) ... ok
test 208:(fx+ (fx+ 1 -2) (fx+ 3 4)) ... ok
test 209:(fx+ (fx+ 1 -2) (fx+ 3 -4)) ... ok
test 210:(fx+ (fx+ 1 -2) (fx+ -3 4)) ... ok
test 211:(fx+ (fx+ 1 -2) (fx+ -3 -4)) ... ok
test 212:(fx+ (fx+ -1 2) (fx+ 3 4)) ... ok
test 213:(fx+ (fx+ -1 2) (fx+ 3 -4)) ... ok
test 214:(fx+ (fx+ -1 2) (fx+ -3 4)) ... ok
test 215:(fx+ (fx+ -1 2) (fx+ -3 -4)) ... ok
test 216:(fx+ (fx+ -1 -2) (fx+ 3 4)) ... ok
test 217:(fx+ (fx+ -1 -2) (fx+ 3 -4)) ... ok
test 218:(fx+ (fx+ -1 -2) (fx+ -3 4)) ... ok
test 219:(fx+ (fx+ -1 -2) (fx+ -3 -4)) ... ok
test 220:(fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 221:(fx+ 1 (fx+ 2 (fx+ 3 (fx+ 4 (fx+ 5 (fx+ 6 (fx+ 7 (fx+ 8 9)))))))) ... ok
test 222:(fx+ (fx+ (fx+ (fx+ 1 2) (fx+ 3 4)) (fx+ (fx+ 5 6) (fx+ 7 8))) (fx+ (fx+ (fx+ 9 10) (fx+ 11 12)) (fx+ (fx+ 13 14) (fx+ 15 16)))) ... ok
test 223:(fx- (fx- 1 2) (fx- 3 4)) ... ok
test 224:(fx- (fx- 1 2) (fx- 3 -4)) ... ok
test 225:(fx- (fx- 1 2) (fx- -3 4)) ... ok
test 226:(fx- (fx- 1 2) (fx- -3 -4)) ... ok
test 227:(fx- (fx- 1 -2) (fx- 3 4)) ... ok
test 228:(fx- (fx- 1 -2) (fx- 3 -4)) ... ok
test 229:(fx- (fx- 1 -2) (fx- -3 4)) ... ok
test 230:(fx- (fx- 1 -2) (fx- -3 -4)) ... ok
test 231:(fx- (fx- -1 2) (fx- 3 4)) ... ok
test 232:(fx- (fx- -1 2) (fx- 3 -4)) ... ok
test 233:(fx- (fx- -1 2) (fx- -3 4)) ... ok
test 234:(fx- (fx- -1 2) (fx- -3 -4)) ... ok
test 235:(fx- (fx- -1 -2) (fx- 3 4)) ... ok
test 236:(fx- (fx- -1 -2) (fx- 3 -4)) ... ok
test 237:(fx- (fx- -1 -2) (fx- -3 4)) ... ok
test 238:(fx- (fx- -1 -2) (fx- -3 -4)) ... ok
test 239:(fx- (fx- (fx- (fx- (fx- (fx- (fx- (fx- 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 240:(fx- 1 (fx- 2 (fx- 3 (fx- 4 (fx- 5 (fx- 6 (fx- 7 (fx- 8 9)))))))) ... ok
test 241:(fx- (fx- (fx- (fx- 1 2) (fx- 3 4)) (fx- (fx- 5 6) (fx- 7 8))) (fx- (fx- (fx- 9 10) (fx- 11 12)) (fx- (fx- 13 14) (fx- 15 16)))) ... ok
test 242:(fx* (fx* (fx* (fx* 2 3) (fx* 4 5)) (fx* (fx* 6 7) (fx* 8 9))) (fx* (fx* (fx* 2 3) (fx* 2 3)) (fx* (fx* 2 3) (fx* 2 3)))) ... ok
test 243:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 244:(fxlognot (fxlogor (fxlognot 7) (fxlognot 2))) ... ok
test 245:(fxlogand (fxlognot (fxlognot 12)) (fxlognot (fxlognot 12))) ... ok
test 246:(fx= (fx+ 13 3) (fx+ 10 6)) ... ok
test 247:(fx= (fx+ 13 0) (fx+ 10 6)) ... ok
test 248:(fx= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 249:(fx< (fx+ 10 6) (fx+ 13 1)) ... ok
test 250:(fx< (fx+ 10 6) (fx+ 13 3)) ... ok
test 251:(fx< (fx+ 10 6) (fx+ 13 31)) ... ok
test 252:(fx< (fx+ 12 1) (fx+ -12 -1)) ... ok
test 253:(fx< (fx+ -12 -1) (fx+ 12 1)) ... ok
test 254:(fx<= (fx+ 10 6) (fx+ 13 1)) ... ok
test 255:(fx<= (fx+ 10 6) (fx+ 13 3)) ... ok
test 256:(fx<= (fx+ 10 6) (fx+ 13 31)) ... ok
test 257:(fx<= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 258:(fx<= (fx+ -12 -1) (fx+ 12 1)) ... ok
test 259:(fx> (fx+ 10 6) (fx+ 13 1)) ... ok
test 260:(fx> (fx+ 10 6) (fx+ 13 3)) ... ok
test 261:(fx> (fx+ 10 6) (fx+ 13 31)) ... ok
test 262:(fx> (fx+ 12 1) (fx+ -12 -1)) ... ok
test 263:(fx> (fx+ -12 -1) (fx+ 12 1)) ... ok
test 264:(fx>= (fx+ 10 6) (fx+ 13 1)) ... ok
test 265:(fx>= (fx+ 10 6) (fx+ 13 3)) ... ok
test 266:(fx>= (fx+ 10 6) (fx+ 13 31)) ... ok
test 267:(fx>= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 268:(fx>= (fx+ -12 -1) (fx+ 12 1)) ... ok
Performing let tests ...
test 269:(let ((x 5)) x) ... ok
test 270:(let ((x (fx+ 1 2))) x) ... ok
test 271:(let ((x (fx+ 1 2))) (let ((y (fx+ 3 4))) (fx+ x y))) ... ok
test 272:(let ((x (fx+ 1 2))) (let ((y (fx+ 3 4))) (fx- y x))) ... ok
test 273:(let ((x (fx+ 1 2)) (y (fx+ 3 4))) (fx- y x)) ... ok
test 274:(let ((x (let ((y (fx+ 1 2))) (fx* y y)))) (fx+ x x)) ... ok
test 275:(let ((x (fx+ 1 2))) (let ((x (fx+ 3 4))) x)) ... ok
test 276:(let ((x (fx+ 1 2))) (let ((x (fx+ x 4))) x)) ... ok
test 277:(let ((t (let ((t (let ((t (let ((t (fx+ 1 2))) t))) t))) t))) t) ... ok
test 278:(let ((x 12)) (let ((x (fx+ x x))) (let ((x (fx+ x x))) (let ((x (fx+ x x))) (fx+ x x))))) ... ok
Performing let* tests ...
test 279:(let* ((x 5)) x) ... ok
test 280:(let ((x 1)) (let ((x (fx+ x 1)) (y (fx+ x 1))) y)) ... ok
test 281:(let* ((x 1)) (let* ((x (fx+ x 1)) (y (fx+ x 1))) y)) ... ok
Performing fx+ tests ...
test 282:(fx+ 1 2) ... ok
test 283:(fx+ 1 -2) ... ok
test 284:(fx+ -1 2) ... ok
test 285:(fx+ -1 -2) ... ok
test 286:(fx+ 536870911 -1) ... ok
test 287:(fx+ 536870910 1) ... ok
test 288:(fx+ -536870912 1) ... ok
test 289:(fx+ -536870911 -1) ... ok
test 290:(fx+ 536870911 -536870912) ... ok
test 291:(fx+ 1 (fx+ 2 3)) ... ok
test 292:(fx+ 1 (fx+ 2 -3)) ... ok
test 293:(fx+ 1 (fx+ -2 3)) ... ok
test 294:(fx+ 1 (fx+ -2 -3)) ... ok
test 295:(fx+ -1 (fx+ 2 3)) ... ok
test 296:(fx+ -1 (fx+ 2 -3)) ... ok
test 297:(fx+ -1 (fx+ -2 3)) ... ok
test 298:(fx+ -1 (fx+ -2 -3)) ... ok
test 299:(fx+ (fx+ 1 2) 3) ... ok
test 300:(fx+ (fx+ 1 2) -3) ... ok
test 301:(fx+ (fx+ 1 -2) 3) ... ok
test 302:(fx+ (fx+ 1 -2) -3) ... ok
test 303:(fx+ (fx+ -1 2) 3) ... ok
test 304:(fx+ (fx+ -1 2) -3) ... ok
test 305:(fx+ (fx+ -1 -2) 3) ... ok
test 306:(fx+ (fx+ -1 -2) -3) ... ok
test 307:(fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 308:(fx+ 1 (fx+ 2 (fx+ 3 (fx+ 4 (fx+ 5 (fx+ 6 (fx+ 7 (fx+ 8 9)))))))) ... ok
Performing fx- tests ...
test 309:(fx- 1 2) ... ok
test 310:(fx- 1 -2) ... ok
test 311:(fx- -1 2) ... ok
test 312:(fx- -1 -2) ... ok
test 313:(fx- 536870910 -1) ... ok
test 314:(fx- 536870911 1) ... ok
test 315:(fx- -536870911 1) ... ok
test 316:(fx- -536870912 -1) ... ok
test 317:(fx- 1 536870911) ... ok
test 318:(fx- -1 536870911) ... ok
test 319:(fx- 1 -536870910) ... ok
test 320:(fx- -1 -536870912) ... ok
test 321:(fx- 536870911 536870911) ... ok
test 322:(fx- -536870911 -536870912) ... ok
test 323:(fx- 1 (fx- 2 3)) ... ok
test 324:(fx- 1 (fx- 2 -3)) ... ok
test 325:(fx- 1 (fx- -2 3)) ... ok
test 326:(fx- 1 (fx- -2 -3)) ... ok
test 327:(fx- -1 (fx- 2 3)) ... ok
test 328:(fx- -1 (fx- 2 -3)) ... ok
test 329:(fx- -1 (fx- -2 3)) ... ok
test 330:(fx- -1 (fx- -2 -3)) ... ok
test 331:(fx- 0 (fx- -2 -3)) ... ok
test 332:(fx- (fx- 1 2) 3) ... ok
test 333:(fx- (fx- 1 2) -3) ... ok
test 334:(fx- (fx- 1 -2) 3) ... ok
test 335:(fx- (fx- 1 -2) -3) ... ok
test 336:(fx- (fx- -1 2) 3) ... ok
test 337:(fx- (fx- -1 2) -3) ... ok
test 338:(fx- (fx- -1 -2) 3) ... ok
test 339:(fx- (fx- -1 -2) -3) ... ok
test 340:(fx- (fx- (fx- (fx- (fx- (fx- (fx- (fx- 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 341:(fx- 1 (fx- 2 (fx- 3 (fx- 4 (fx- 5 (fx- 6 (fx- 7 (fx- 8 9)))))))) ... ok
Performing fx* tests ...
test 342:(fx* 2 3) ... ok
test 343:(fx* 2 -3) ... ok
test 344:(fx* -2 3) ... ok
test 345:(fx* -2 -3) ... ok
test 346:(fx* 536870911 1) ... ok
test 347:(fx* 536870911 -1) ... ok
test 348:(fx* -536870912 1) ... ok
test 349:(fx* -536870911 -1) ... ok
test 350:(fx* 2 (fx* 3 4)) ... ok
test 351:(fx* (fx* 2 3) 4) ... ok
test 352:(fx* (fx* (fx* (fx* (fx* 2 3) 4) 5) 6) 7) ... ok
test 353:(fx* 2 (fx* 3 (fx* 4 (fx* 5 (fx* 6 7))))) ... ok
Performing fxlogand and fxlogor tests ...
test 354:(fxlogor 3 16) ... ok
test 355:(fxlogor 3 5) ... ok
test 356:(fxlogor 3 7) ... ok
test 357:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 358:(fxlognot (fxlogor 1 (fxlognot 7))) ... ok
test 359:(fxlogand 3 7) ... ok
test 360:(fxlogand 3 5) ... ok
test 361:(fxlogand 2346 (fxlognot 2346)) ... ok
test 362:(fxlogand (fxlognot 2346) 2346) ... ok
test 363:(fxlogand 2376 2376) ... ok
Performing fx= tests ...
test 364:(fx= 12 13) ... ok
test 365:(fx= 12 12) ... ok
test 366:(fx= 16 (fx+ 13 3)) ... ok
test 367:(fx= 16 (fx+ 13 13)) ... ok
test 368:(fx= (fx+ 13 3) 16) ... ok
test 369:(fx= (fx+ 13 13) 16) ... ok
Performing fx< tests ...
test 370:(fx< 12 13) ... ok
test 371:(fx< 12 12) ... ok
test 372:(fx< 13 12) ... ok
test 373:(fx< 16 (fx+ 13 1)) ... ok
test 374:(fx< 16 (fx+ 13 3)) ... ok
test 375:(fx< 16 (fx+ 13 13)) ... ok
test 376:(fx< (fx+ 13 1) 16) ... ok
test 377:(fx< (fx+ 13 3) 16) ... ok
test 378:(fx< (fx+ 13 13) 16) ... ok
Performing fx<= tests ...
test 379:(fx<= 12 13) ... ok
test 380:(fx<= 12 12) ... ok
test 381:(fx<= 13 12) ... ok
test 382:(fx<= 16 (fx+ 13 1)) ... ok
test 383:(fx<= 16 (fx+ 13 3)) ... ok
test 384:(fx<= 16 (fx+ 13 13)) ... ok
test 385:(fx<= (fx+ 13 1) 16) ... ok
test 386:(fx<= (fx+ 13 3) 16) ... ok
test 387:(fx<= (fx+ 13 13) 16) ... ok
Performing fx> tests ...
test 388:(fx> 12 13) ... ok
test 389:(fx> 12 12) ... ok
test 390:(fx> 13 12) ... ok
test 391:(fx> 16 (fx+ 13 1)) ... ok
test 392:(fx> 16 (fx+ 13 3)) ... ok
test 393:(fx> 16 (fx+ 13 13)) ... ok
test 394:(fx> (fx+ 13 1) 16) ... ok
test 395:(fx> (fx+ 13 3) 16) ... ok
test 396:(fx> (fx+ 13 13) 16) ... ok
Performing fx>= tests ...
test 397:(fx>= 12 13) ... ok
test 398:(fx>= 12 12) ... ok
test 399:(fx>= 13 12) ... ok
test 400:(fx>= 16 (fx+ 13 1)) ... ok
test 401:(fx>= 16 (fx+ 13 3)) ... ok
test 402:(fx>= 16 (fx+ 13 13)) ... ok
test 403:(fx>= (fx+ 13 1) 16) ... ok
test 404:(fx>= (fx+ 13 3) 16) ... ok
test 405:(fx>= (fx+ 13 13) 16) ... ok
Performing if tests ...
test 406:(if (fx= 12 13) 12 13) ... ok
test 407:(if (fx= 12 12) 13 14) ... ok
test 408:(if (fx< 12 13) 12 13) ... ok
test 409:(if (fx< 12 12) 13 14) ... ok
test 410:(if (fx< 13 12) 13 14) ... ok
test 411:(if (fx<= 12 13) 12 13) ... ok
test 412:(if (fx<= 12 12) 12 13) ... ok
test 413:(if (fx<= 13 12) 13 14) ... ok
test 414:(if (fx> 12 13) 12 13) ... ok
test 415:(if (fx> 12 12) 12 13) ... ok
test 416:(if (fx> 13 12) 13 14) ... ok
test 417:(if (fx>= 12 13) 12 13) ... ok
test 418:(if (fx>= 12 12) 12 13) ... ok
test 419:(if (fx>= 13 12) 13 14) ... ok
Performing if tests ...
test 420:(if #t 12 13) ... ok
test 421:(if #f 12 13) ... ok
test 422:(if 0 12 13) ... ok
test 423:(if () 43 ()) ... ok
test 424:(if #t (if 12 13 4) 17) ... ok
test 425:(if #f 12 (if #f 13 4)) ... ok
test 426:(if #\X (if 1 2 3) (if 4 5 6)) ... ok
test 427:(if (not (boolean? #t)) 15 (boolean? #f)) ... ok
test 428:(if (if (char? #\a) (boolean? #\b) (fixnum? #\c)) 119 -23) ... ok
test 429:(if (if (if (not 1) (not 2) (not 3)) 4 5) 6 7) ... ok
test 430:(if (not (if (if (not 1) (not 2) (not 3)) 4 5)) 6 7) ... ok
test 431:(not (if (not (if (if (not 1) (not 2) (not 3)) 4 5)) 6 7)) ... ok
test 432:(if (char? 12) 13 14) ... ok
test 433:(if (char? #\a) 13 14) ... ok
test 434:(fxadd1 (if (fxsub1 1) (fxsub1 13) 14)) ... ok
Performing and tests ...
test 435:(and) ... ok
test 436:(and #t) ... ok
test 437:(and #f) ... ok
test 438:(and #t #t) ... ok
test 439:(and #t #f) ... ok
test 440:(and #t #t #t) ... ok
test 441:(and #t #t #t #t #t #t #t) ... ok
test 442:(and #t #t #t #f #t #t #t) ... ok
test 443:(and (char? 12) (boolean? #f)) ... ok
test 444:(and (char? #\a) (boolean? #f)) ... ok
test 445:(and (char? #\newline) (not #f)) ... ok
test 446:(and (char? #\newline) (not #f) (not ())) ... ok
Performing or tests ...
test 447:(or) ... ok
test 448:(or #t) ... ok
test 449:(or #f) ... ok
test 450:(or #t #f) ... ok
test 451:(or #f #t) ... ok
test 452:(or #f #f #f #f #f #f #f #f #f #f #f #t) ... ok
test 453:(or #f #f #f #f #f (char? 14) (boolean? #\a)) ... ok
test 454:(and (or (char? 12) (char? #\a)) (or (boolean? 13) (boolean? #f))) ... ok
test 455:(or (char? #\a) (boolean? #f)) ... ok
Performing fxadd1 tests ...
test 456:(fxadd1 0) ... ok
test 457:(fxadd1 -1) ... ok
test 458:(fxadd1 1) ... ok
test 459:(fxadd1 -100) ... ok
test 460:(fxadd1 1000) ... ok
test 461:(fxadd1 536870910) ... ok
test 462:(fxadd1 -536870912) ... ok
test 463:(fxadd1 (fxadd1 0)) ... ok
test 464:(fxadd1 (fxadd1 (fxadd1 (fxadd1 (fxadd1 (fxadd1 12)))))) ... ok
Performing fixnum->char and char->fixnum tests ...
test 465:(fixnum->char 65) ... ok
test 466:(fixnum->char 97) ... ok
test 467:(fixnum->char 122) ... ok
test 468:(fixnum->char 90) ... ok
test 469:(fixnum->char 48) ... ok
test 470:(fixnum->char 57) ... ok
test 471:(char->fixnum #\A) ... ok
test 472:(char->fixnum #\a) ... ok
test 473:(char->fixnum #\z) ... ok
test 474:(char->fixnum #\Z) ... ok
test 475:(char->fixnum #\0) ... ok
test 476:(char->fixnum #\9) ... ok
test 477:(char->fixnum (fixnum->char 12)) ... ok
test 478:(fixnum->char (char->fixnum #\x)) ... ok
Performing fixnum? tests ...
test 479:(fixnum? 0) ... ok
test 480:(fixnum? 1) ... ok
test 481:(fixnum? -1) ... ok
test 482:(fixnum? 37287) ... ok
test 483:(fixnum? -23873) ... ok
test 484:(fixnum? 536870911) ... ok
test 485:(fixnum? -536870912) ... ok
test 486:(fixnum? #t) ... ok
test 487:(fixnum? #f) ... ok
test 488:(fixnum? ()) ... ok
test 489:(fixnum? #\Q) ... ok
test 490:(fixnum? (fixnum? 12)) ... ok
test 491:(fixnum? (fixnum? #f)) ... ok
test 492:(fixnum? (fixnum? #\A)) ... ok
test 493:(fixnum? (char->fixnum #\r)) ... ok
test 494:(fixnum? (fixnum->char 12)) ... ok
Performing fxzero? tests ...
test 495:(fxzero? 0) ... ok
test 496:(fxzero? 1) ... ok
test 497:(fxzero? -1) ... ok
Performing null? tests ...
test 498:(null? ()) ... ok
test 499:(null? #f) ... ok
test 500:(null? #t) ... ok
test 501:(null? (null? ())) ... ok
test 502:(null? #\a) ... ok
test 503:(null? 0) ... ok
test 504:(null? -10) ... ok
test 505:(null? 10) ... ok
Performing boolean? tests ...
test 506:(boolean? #t) ... ok
test 507:(boolean? #f) ... ok
test 508:(boolean? 0) ... ok
test 509:(boolean? 1) ... ok
test 510:(boolean? -1) ... ok
test 511:(boolean? ()) ... ok
test 512:(boolean? #\a) ... ok
test 513:(boolean? (boolean? 0)) ... ok
test 514:(boolean? (fixnum? (boolean? 0))) ... ok
Performing char? tests ...
test 515:(char? #\a) ... ok
test 516:(char? #\Z) ... ok
test 517:(char? #\newline) ... ok
test 518:(char? #t) ... ok
test 519:(char? #f) ... ok
test 520:(char? ()) ... ok
test 521:(char? (char? #t)) ... ok
test 522:(char? 0) ... ok
test 523:(char? 23870) ... ok
test 524:(char? -23789) ... ok
Performing not tests ...
test 525:(not #t) ... ok
test 526:(not #f) ... ok
test 527:(not 15) ... ok
test 528:(not ()) ... ok
test 529:(not #\A) ... ok
test 530:(not (not #t)) ... ok
test 531:(not (not #f)) ... ok
test 532:(not (not 15)) ... ok
test 533:(not (fixnum? 15)) ... ok
test 534:(not (fixnum? #f)) ... ok
Performing fxlognot tests ...
test 535:(fxlognot 0) ... ok
test 536:(fxlognot -1) ... ok
test 537:(fxlognot 1) ... ok
test 538:(fxlognot -2) ... ok
test 539:(fxlognot 536870911) ... ok
test 540:(fxlognot -536870912) ... ok
test 541:(fxlognot (fxlognot 237463)) ... ok
Performing immediate constants tests ...
test 542:#f ... ok
test 543:#t ... ok
test 544:() ... ok
test 545:#\tab ... ok
test 546:#\newline ... ok
test 547:#\return ... ok
test 548:#\space ... ok
test 549:#\! ... ok
test 550:#\" ... ok
test 551:#\# ... ok
test 552:#\$ ... ok
test 553:#\% ... ok
test 554:#\& ... ok
test 555:#\' ... ok
test 556:#\( ... ok
test 557:#\) ... ok
test 558:#\* ... ok
test 559:#\+ ... ok
test 560:#\, ... ok
test 561:#\- ... ok
test 562:#\. ... ok
test 563:#\/ ... ok
test 564:#\0 ... ok
test 565:#\1 ... ok
test 566:#\2 ... ok
test 567:#\3 ... ok
test 568:#\4 ... ok
test 569:#\5 ... ok
test 570:#\6 ... ok
test 571:#\7 ... ok
test 572:#\8 ... ok
test 573:#\9 ... ok
test 574:#\: ... ok
test 575:#\; ... ok
test 576:#\< ... ok
test 577:#\= ... ok
test 578:#\> ... ok
test 579:#\? ... ok
test 580:#\@ ... ok
test 581:#\A ... ok
test 582:#\B ... ok
test 583:#\C ... ok
test 584:#\D ... ok
test 585:#\E ... ok
test 586:#\F ... ok
test 587:#\G ... ok
test 588:#\H ... ok
test 589:#\I ... ok
test 590:#\J ... ok
test 591:#\K ... ok
test 592:#\L ... ok
test 593:#\M ... ok
test 594:#\N ... ok
test 595:#\O ... ok
test 596:#\P ... ok
test 597:#\Q ... ok
test 598:#\R ... ok
test 599:#\S ... ok
test 600:#\T ... ok
test 601:#\U ... ok
test 602:#\V ... ok
test 603:#\W ... ok
test 604:#\X ... ok
test 605:#\Y ... ok
test 606:#\Z ... ok
test 607:#\[ ... ok
test 608:#\\ ... ok
test 609:#\] ... ok
test 610:#\^ ... ok
test 611:#\_ ... ok
test 612:#\` ... ok
test 613:#\a ... ok
test 614:#\b ... ok
test 615:#\c ... ok
test 616:#\d ... ok
test 617:#\e ... ok
test 618:#\f ... ok
test 619:#\g ... ok
test 620:#\h ... ok
test 621:#\i ... ok
test 622:#\j ... ok
test 623:#\k ... ok
test 624:#\l ... ok
test 625:#\m ... ok
test 626:#\n ... ok
test 627:#\o ... ok
test 628:#\p ... ok
test 629:#\q ... ok
test 630:#\r ... ok
test 631:#\s ... ok
test 632:#\t ... ok
test 633:#\u ... ok
test 634:#\v ... ok
test 635:#\w ... ok
test 636:#\x ... ok
test 637:#\y ... ok
test 638:#\z ... ok
test 639:#\{ ... ok
test 640:#\| ... ok
test 641:#\} ... ok
test 642:#\~ ... ok
Performing integers tests ...
test 643:0 ... ok
test 644:1 ... ok
test 645:-1 ... ok
test 646:10 ... ok
test 647:-10 ... ok
test 648:2736 ... ok
test 649:-2736 ... ok
test 650:536870911 ... ok
test 651:-536870912 ... ok
passed all 652 tests
> 
