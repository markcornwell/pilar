Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing error tests ...
test 0:(error (quote foo) "here") ... ok
Performing apply error tests ...
test 1:(let ((f 6)) (f f)) ... ok
test 2:(let ((f 6)) (f (f))) ... ok
test 3:(1 2 3) ... ok
test 4:(1 (3 4)) ... ok
test 5:(let ((f (lambda () (1 2 3)))) 12) ... ok
Performing arg-check for fixed-arg procedures tests ...
test 6:(let ((f (lambda () 12))) (f)) ... ok
test 7:(let ((f (lambda () 12))) (f 1)) ... ok
test 8:(let ((f (lambda () 12))) (f 1 2)) ... ok
test 9:(let ((f (lambda (x) (fx+ x x)))) (f)) ... ok
test 10:(let ((f (lambda (x) (fx+ x x)))) (f 1)) ... ok
test 11:(let ((f (lambda (x) (fx+ x x)))) (f 1 2)) ... ok
test 12:(let ((f (lambda (x y) (fx* x (fx+ y y))))) (f)) ... ok
test 13:(let ((f (lambda (x y) (fx* x (fx+ y y))))) (f 2)) ... ok
test 14:(let ((f (lambda (x y) (fx* x (fx+ y y))))) (f 2 3)) ... ok
test 15:(let ((f (lambda (x y) (fx* x (fx+ y y))))) (f 2 3 4)) ... ok
Performing arg-check for var-arg procedures tests ...
test 16:(let ((f (lambda x x))) (f)) ... ok
test 17:(let ((f (lambda x x))) (f (quote a))) ... ok
test 18:(let ((f (lambda x x))) (f (quote a) (quote b))) ... ok
test 19:(let ((f (lambda x x))) (f (quote a) (quote b) (quote c))) ... ok
test 20:(let ((f (lambda x x))) (f (quote a) (quote b) (quote c) (quote d))) ... ok
test 21:(let ((f (lambda (x . rest) (vector x rest)))) (f)) ... ok
test 22:(let ((f (lambda (x . rest) (vector x rest)))) (f (quote a))) ... ok
test 23:(let ((f (lambda (x . rest) (vector x rest)))) (f (quote a) (quote b))) ... ok
test 24:(let ((f (lambda (x . rest) (vector x rest)))) (f (quote a) (quote b) (quote c))) ... ok
test 25:(let ((f (lambda (x . rest) (vector x rest)))) (f (quote a) (quote b) (quote c) (quote d))) ... ok
test 26:(let ((f (lambda (x y . rest) (vector x y rest)))) (f)) ... ok
test 27:(let ((f (lambda (x y . rest) (vector x y rest)))) (f (quote a))) ... ok
test 28:(let ((f (lambda (x y . rest) (vector x y rest)))) (f (quote a) (quote b))) ... ok
test 29:(let ((f (lambda (x y . rest) (vector x y rest)))) (f (quote a) (quote b) (quote c))) ... ok
test 30:(let ((f (lambda (x y . rest) (vector x y rest)))) (f (quote a) (quote b) (quote c) (quote d))) ... ok
Performing arg-check for primitives tests ...
test 31:(cons 1 2 3) ...> 
