Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing symbols list tests ...
test 0:(symbols) ... ok
test 1:(make-symbol "foo" "baz") ... ok
test 2:(symbol? (make-symbol "foo" "bar")) ... ok
test 3:(symbol->string (make-symbol "foo" "bar")) ... ok
test 4:(symbol-value (make-symbol "foo" "bar")) ... ok
test 5:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f))))))) (s= "foo" 0 "foo" 0)) ... ok
test 6:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0)))) (ss= "foo" "foo")) ... ok
test 7:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0)))) (ss= "foo" "fo")) ... ok
test 8:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0)))) (ss= "" "")) ... ok
test 9:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0)))) (ss= "" "fubar")) ... ok
test 10:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0))) (s2sym1 (lambda (str symlist) (if (ss= str (symbol->string (car symlist))) (car symlist) (if (null? (cdr symlist)) (begin (set-cdr! symlist (cons (make-symbol str #f) ())) (car (cdr symlist))) (s2sym1 str (cdr symlist)))))) (s2sym (lambda (str) (s2sym1 str (symbols))))) (s2sym "fubar")) ... ok
test 11:(letrec ((s= (lambda (s1 i s2 j) (let ((l1 (string-length s1)) (l2 (string-length s2))) (if (not (fx= l1 l2)) #f (if (fx= i l1) #t (if (char=? (string-ref s1 i) (string-ref s2 j)) (s= s1 (fx+ i 1) s2 (fx+ j 1)) #f)))))) (ss= (lambda (s1 s2) (s= s1 0 s2 0))) (s2sym1 (lambda (str symlist) (if (ss= str (symbol->string (car symlist))) (car symlist) (if (null? (cdr symlist)) (let ((new-sym (make-symbol str #f))) (begin (set-cdr! symlist (cons new-sym ())) new-sym)) (s2sym1 str (cdr symlist)))))) (s2sym (lambda (str) (s2sym1 str (symbols))))) (s2sym "baz")) ... ok
test 12:(letrec ((slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) (si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) (si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if (si= s1 s2 i) (si<n s1 s2 (fx+ i 1) n) #f)))) (ss= (lambda (s1 s2) (if (slen= s1 s2) (si<n s1 s2 0 (length s1)) #f))) (str->sym1 (lambda (str symlist) (if (ss= str (symbol->string (car symlist))) (car symlist) (if (null? (cdr symlist)) (let ((new-sym (make-symbol str #f))) (begin (set-cdr! symlist (cons new-sym ())) new-sym)) (str->sym1 str (cdr symlist)))))) (str->sym (lambda (str) (str->sym1 str (symbols))))) (begin (str->sym "fu"))) ... ok
test 13:(let ((a (cons #t ())) (b (cons #f ()))) (set-cdr! a b) a) ... ok
test 14:(let ((a (cons #t ())) (b (cons #f ())) (c (cons 42 ()))) (set-cdr! a b) (set-cdr! b c) a) ... ok
test 15:(letrec ((slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) (si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) (si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if (si= s1 s2 i) (si<n s1 s2 (fx+ i 1) n) #f)))) (ss= (lambda (s1 s2) (if (slen= s1 s2) (si<n s1 s2 0 (length s1)) #f))) (str->sym1 (lambda (str symlist) (if (ss= str (symbol->string (car symlist))) (car symlist) (if (null? (cdr symlist)) (let* ((new-sym (make-symbol str #f)) (new-cdr (cons new-sym ()))) (begin (set-cdr! symlist new-cdr) new-sym)) (str->sym1 str (cdr symlist)))))) (str->sym (lambda (str) (str->sym1 str (symbols))))) (begin (str->sym "fu") (symbols))) ... ok
test 16:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i))))) ($si= "flip" "flop" 0)) ... ok
test 17:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i))))) (cons ($si= "flip" "flop" 0) ())) ... ok
test 18:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i))))) (cons ($si= "flip" "flop" 0) (cons ($si= "flip" "flop" 1) ()))) ... ok
test 19:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i))))) (cons ($si= "flip" "flop" 0) (cons ($si= "flip" "flop" 1) (cons ($si= "flip" "flop" 2) ())))) ... ok
test 20:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i))))) (cons ($si= "flip" "flop" 0) (cons ($si= "flip" "flop" 1) (cons ($si= "flip" "flop" 2) (cons ($si= "flip" "flop" 3) ()))))) ... ok
test 21:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($diff (lambda (s1 s2 i) (if (fx= i (string-length s1)) #f (if ($si= s1 s2 i) ($diff s1 s2 (fx+ i 1)) #t))))) ($diff "wah" "wah" 0)) ... ok
test 22:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($diff (lambda (s1 s2 i) (if (fx= i (string-length s1)) #f (if ($si= s1 s2 i) ($diff s1 s2 (fx+ i 1)) #t))))) (cons ($diff "wah" "wah" 0) (cons ($diff "cornwell" "cornwall") ()))) ... ok
test 23:(letrec (($m (lambda (s1 s2 i) (if (fx= i (string-length s1)) () (cons (char=? (string-ref s1 i) (string-ref s2 i)) ($m s1 s2 (fx+ i 1))))))) ($m "yo" "yi" 0)) ... ok
test 24:(letrec (($m (lambda (s1 s2 i) (if (fx= i (string-length s1)) () (cons (char=? (string-ref s1 i) (string-ref s2 i)) ($m s1 s2 (fx+ i 1))))))) ($m "yobargomdoop" "yibargompood" 0)) ... ok
test 25:(letrec (($m (lambda (s1 s2 i) (if (fx= i (string-length s1)) () (cons (char=? (string-ref s1 i) (string-ref s2 i)) ($m s1 s2 (fx+ i 1))))))) ($m "yo" "yi" 0)) ... ok
test 26:(letrec (($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($m (lambda (s1 s2 i) (if (fx= i (string-length s1)) () (cons (make-symbol "foo" #f) ($m s1 s2 (fx+ i 1))))))) ($m "hj" "anything" 0)) ... ok
test 27:(let (($si= (make-vector 1)) ($m (make-vector 1))) (begin (begin (vector-set! $si= 0 (closure (s1 s2 i) () (char=? (string-ref s1 i) (string-ref s2 i)))) (vector-set! $m 0 (closure (s1 s2 i) ($si= $m) (if (fx= i (string-length s1)) () (cons ((vector-ref $si= 0) s1 s2 i) ((vector-ref $m 0) s1 s2 (fx+ i 1))))))) (funcall (vector-ref $m 0) "fi" "fo" 0))) ... ok
test 28:(letrec (($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($m (lambda (s1 s2 i) (if (fx= i (string-length s1)) () (cons ($si= s1 s2 i) ($m s1 s2 (fx+ i 1))))))) ($m "he" "ho" 0)) ... ok
test 29:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if ($si= s1 s2 i) ($si<n= s1 s2 (fx+ i 1) n) #f))))) ($si<n= "hi" "ho" 0 1)) ... ok
test 30:(let (($si= (make-vector 1)) ($si<n= (make-vector 1)) ($ss= (make-vector 1))) (begin (begin (vector-set! $si= 0 (closure (s1 s2 i) () (let ((s1 s1) (s2 s2) (i i)) (char=? (string-ref s1 i) (string-ref s2 i))))) (vector-set! $si<n= 0 (closure (s1 s2 i n) ($si= $si<n=) (let ((s1 s1) (s2 s2) (i i) (n n)) (if (fx= i n) #t (if ((vector-ref $si= 0) s1 s2 i) ((vector-ref $si<n= 0) s1 s2 (fx+ i 1) n) #f))))) (vector-set! $ss= 0 (closure (s1 s2) (dummy $si<n= length) (let ((s1 s1) (s2 s2)) (if (fx= (string-length s1) (string-length s2)) ((vector-ref $si<n= 0) s1 s2 0 (string-length s1)) #f))))) ((vector-ref $ss= 0) "mello" "mello"))) ... ok
test 31:(let (($si= (make-vector 1)) ($si<n= (make-vector 1)) ($ss= (make-vector 1))) (begin (begin (vector-set! $si= 0 (closure (s1 s2 i) () (let ((s1 s1) (s2 s2) (i i)) (char=? (string-ref s1 i) (string-ref s2 i))))) (vector-set! $si<n= 0 (closure (s1 s2 i n) ($si= $si<n=) (let ((s1 s1) (s2 s2) (i i) (n n)) (if (fx= i n) #t (if ((vector-ref $si= 0) s1 s2 i) ((vector-ref $si<n= 0) s1 s2 (fx+ i 1) n) #f))))) (vector-set! $ss= 0 (closure (s1 s2) (dummy $si<n=) (let ((s1 s1) (s2 s2)) (if (fx= (string-length s1) (string-length s2)) ((vector-ref $si<n= 0) s1 s2 0 (string-length s1)) #f))))) ((vector-ref $ss= 0) "leffo" "leffo"))) ... ok
test 32:(let (($si= (make-vector 1)) ($si<n= (make-vector 1)) ($ss= (make-vector 1))) (begin (begin (vector-set! $si= 0 (closure (s1 s2 i) () (let ((s1 s1) (s2 s2) (i i)) (char=? (string-ref s1 i) (string-ref s2 i))))) (vector-set! $si<n= 0 (closure (s1 s2 i n) ($si= $si<n=) (let ((s1 s1) (s2 s2) (i i) (n n)) (if (fx= i n) #t (if ((vector-ref $si= 0) s1 s2 i) ((vector-ref $si<n= 0) s1 s2 (fx+ i 1) n) #f))))) (vector-set! $ss= 0 (closure (s1 s2) (dummy $si<n=) (let ((s1 s1) (s2 s2)) (if (fx= (string-length s1) (string-length s2)) ((vector-ref $si<n= 0) s1 s2 0 (string-length s1)) #f))))) (cons ((vector-ref $ss= 0) "leffo" "leffo") (cons ((vector-ref $ss= 0) "mark cornwell" "mark cornwell") (cons ((vector-ref $ss= 0) "little pink car" "little pink cat") ()))))) ... ok
test 33:(let (($si= (make-vector 1)) ($si<n= (make-vector 1)) ($ss= (make-vector 1))) (begin (begin (vector-set! $si= 0 (closure (s1 s2 i) () (let ((s1 s1) (s2 s2) (i i)) (char=? (string-ref s1 i) (string-ref s2 i))))) (vector-set! $si<n= 0 (closure (s1 s2 i n) ($si= $si<n=) (let ((s1 s1) (s2 s2) (i i) (n n)) (if (fx= i n) #t (if ((vector-ref $si= 0) s1 s2 i) ((vector-ref $si<n= 0) s1 s2 (fx+ i 1) n) #f))))) (vector-set! $ss= 0 (closure (s1 s2) ($si<n=) (let ((s1 s1) (s2 s2)) (if (fx= (string-length s1) (string-length s2)) ((vector-ref $si<n= 0) s1 s2 0 (string-length s1)) #f))))) ((vector-ref $ss= 0) "feddo" "feddo"))) ... ok
test 34:(letrec (($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if ($si= s1 s2 i) ($si<n= s1 s2 (fx+ i 1) n) #f)))) ($ss= (lambda (s1 s2) (if (fx= (string-length s1) (string-length s2)) ($si<n= s1 s2 0 (string-length s1)) #f)))) ($ss= "yello" "yello")) ... ok
test 35:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if ($si= s1 s2 i) ($si<n= s1 s2 (fx+ i 1) n) #f)))) ($ss= (lambda (s1 s2) (if ($slen= s1 s2) ($si<n= s1 s2 0 (string-length s1)) #f)))) ($ss= "hello" "hello")) ... ok
test 36:(letrec (($slen= (lambda (s1 s2) (fx= (string-length s1) (string-length s2)))) ($si= (lambda (s1 s2 i) (char=? (string-ref s1 i) (string-ref s2 i)))) ($si<n= (lambda (s1 s2 i n) (if (fx= i n) #t (if ($si= s1 s2 i) ($si<n= s1 s2 (fx+ i 1) n) #f)))) ($ss= (lambda (s1 s2) (if ($slen= s1 s2) ($si<n= s1 s2 0 (string-length s1)) #f))) ($str->sym1 (lambda (str symlist) (if ($ss= str (symbol->string (car symlist))) (car symlist) (if (null? (cdr symlist)) (let* ((new-sym (make-symbol str #f)) (new-cdr (cons new-sym ()))) (begin (set-cdr! symlist new-cdr) new-sym)) ($str->sym1 str (cdr symlist)))))) ($str->sym (lambda (str) ($str->sym1 str (symbols))))) (begin ($str->sym "yellow") ($str->sym "fellow") ($str->sym "") ($str->sym "fu") ($str->sym "baz"))) ... ok
test 37:(string=? "foo" "foo") ... ok
test 38:(string=? "foo" "baz") ... ok
test 39:(string=? "foo" "fo") ... ok
test 40:(string=? "foo" "for") ... ok
test 41:(string=? "" "for") ... ok
test 42:(string=? "foo" "") ... ok
test 43:(string=? "" "") ... ok
Performing symbols tests ...
test 44:(string->symbol "foo") ... ok
test 45:(symbol? (quote foo)) ... ok
test 46:(symbol? (quote ())) ... ok
test 47:(symbol? "") ... ok
test 48:(symbol? (quote (1 2))) ... ok
test 49:(symbol? (lambda (x) x)) ... ok
test 50:(symbol? (quote foo)) ... ok
test 51:(string? (quote foo)) ... ok
test 52:(pair? (quote foo)) ... ok
test 53:(vector? (quote foo)) ... ok
test 54:(null? (quote foo)) ... ok
test 55:(boolean? (quote foo)) ... ok
test 56:(procedure? (quote foo)) ... ok
test 57:(eq? (string->symbol "foo") #t) ... ok
test 58:(eq? #t (string->symbol "bar")) ... ok
test 59:(begin (string->symbol "foo")) ... ok
test 60:(string->symbol "nil") ... ok
test 61:(let ((a (string->symbol "nil")) (b (string->symbol "nil"))) (eq? a b)) ... ok
test 62:(let ((a (string->symbol "nil")) (b (string->symbol "foo"))) (eq? a b)) ... ok
test 63:(let ((a (string->symbol "nil")) (b (string->symbol "nil")) (c (string->symbol "nil")) (d (string->symbol "nil")) (e (string->symbol "nil"))) #t) ... ok
test 64:(let ((a (string->symbol "nil")) (b (string->symbol "fuu")) (c (string->symbol "nil")) (d (string->symbol "nil")) (e (string->symbol "nil"))) #t) ... ok
test 65:(let ((a (string->symbol "nil")) (b (string->symbol "fuu")) (c (string->symbol "nil")) (d (string->symbol "nil")) (e (string->symbol "buu"))) #t) ... ok
test 66:(let ((a (string->symbol "ha")) (b (string->symbol "ha")) (c (string->symbol "ha")) (d (string->symbol "ha")) (e (string->symbol "ha"))) #t) ... ok
test 67:(let ((a (string->symbol "goo")) (b (string->symbol "ber"))) #t) ... ok
test 68:(let ((a (string->symbol "nil")) (b (string->symbol "foo")) (c (string->symbol "baz"))) #t) ... ok
test 69:(let ((a (string->symbol "nil")) (b (string->symbol "foo")) (c (string->symbol "baz"))) (symbols)) ... ok
test 70:(begin (string->symbol "foo") (string->symbol "foo") 42) ... ok
test 71:(begin (string->symbol "foo") (string->symbol "foo")) ... ok
test 72:(begin (string->symbol "foo") (string->symbol "bar")) ... ok
test 73:(eq? (string->symbol "foo") (string->symbol "bar")) ... ok
test 74:(eq? (quote foo) (quote bar)) ... ok
test 75:(eq? (quote foo) (quote foo)) ... ok
test 76:(quote foo) ... ok
test 77:(quote (foo bar baz)) ... ok
test 78:(quote (foo foo foo foo foo foo foo foo foo foo foo)) ... ok
Performing begin border case tests ...
test 79:12 ... ok
test 80:(begin 12) ... ok
test 81:(begin (begin) 12) ... ok
test 82:(begin (begin) (begin) (begin) (begin) #f) ... ok
test 83:(begin (begin) (begin) (begin (begin (begin (begin)))) (begin #\A)) ... ok
test 84:(begin (begin (begin (begin (begin (begin (begin (begin #f) 42))))))) ... ok
Performing letrec tests ...
test 85:(letrec () 12) ... ok
test 86:(letrec ((f 12)) f) ... ok
test 87:(letrec ((f 12) (g 13)) (fx+ f g)) ... ok
test 88:(letrec ((fact (lambda (n) (if (fxzero? n) 1 (fx* n (fact (fxsub1 n))))))) (fact 5)) ... ok
test 89:(letrec ((f 12) (g (lambda () f))) (g)) ... ok
test 90:(letrec ((f 12) (g (lambda (n) (set! f n)))) (g 130) f) ... ok
test 91:(letrec ((f (lambda (g) (set! f g) (f)))) (f (lambda () 12))) ... ok
test 92:(letrec ((f (cons (lambda () f) (lambda (x) (set! f x))))) (let ((g (car f))) ((cdr f) 100) (g))) ... ok
test 93:(letrec ((f (letrec ((g (lambda (x) (fx* x 2)))) (lambda (n) (g (fx* n 2)))))) (f 12)) ... ok
test 94:(letrec ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f f (fxsub1 n))))))) (f f 5)) ... ok
test 95:(let ((f (lambda (f) (lambda (n) (if (fxzero? n) 1 (fx* n (f (fxsub1 n)))))))) (letrec ((fix (lambda (f) (f (lambda (n) ((fix f) n)))))) ((fix f) 5))) ... ok
Performing and/or tests ...
test 96:(and) ... ok
test 97:(and 5) ... ok
test 98:(and #f) ... ok
test 99:(and 5 6) ... ok
test 100:(and #f ((lambda (x) (x x)) (lambda (x) (x x)))) ... ok
test 101:(or) ... ok
test 102:(or #t) ... ok
test 103:(or 5) ... ok
test 104:(or 1 2 3) ... ok
test 105:(or (cons 1 2) ((lambda (x) (x x)) (lambda (x) (x x)))) ... ok
test 106:(let ((if 12)) (or if 17)) ... ok
test 107:(let ((if 12)) (and if 17)) ... ok
test 108:(let ((t 1)) (and (begin (set! t (fxadd1 t)) t) t)) ... ok
test 109:(let ((t 1)) (or (begin (set! t (fxadd1 t)) t) t)) ... ok
Performing when/unless tests ...
test 110:(let ((x (cons 1 2))) (when (pair? x) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 111:(let ((x (cons 1 2))) (when (pair? x) (set-car! x (fx+ (car x) (cdr x))) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 112:(let ((x (cons 1 2))) (unless (fixnum? x) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 113:(let ((x (cons 1 2))) (unless (fixnum? x) (set-car! x (fx+ (car x) (cdr x))) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
Performing cond tests ...
test 114:(cond (1 2) (else 3)) ... ok
test 115:(cond (1 1) (else 13)) ... ok
test 116:(cond (#f #t) (#t #f)) ... ok
test 117:(cond (else 17)) ... ok
test 118:(cond (#f 42) (#f 12) (12 13)) ... ok
test 119:(cond (#t ((lambda (x) (cdr x)) (cons 1 2)))) ... ok
test 120:(let ((else #t)) (cond (else 1287))) ... ok
test 121:(let ((else 17)) (cond (else else))) ... ok
test 122:(let ((=> 12)) (cond (12 14) (else 17))) ... ok
test 123:(let ((=> 12)) (cond (=> =>))) ... ok
Performing sting literals tests ...
test 124:"hello" ... ok
test 125:"" ... ok
test 126:"When in the course of human events..." ... ok
Performing simple quote tests ...
test 127:(quote #t) ... ok
test 128:(quote #f) ... ok
test 129:(quote #\A) ... ok
test 130:(quote 4) ... ok
test 131:(quote -42) ... ok
test 132:(quote "hello") ... ok
test 133:(quote "When in the course of human events...") ... ok
Performing complex constants tests ...
test 134:(quote 42) ... ok
test 135:(quote (1 . 2)) ... ok
test 136:(quote (1 2 3)) ... ok
test 137:(let ((x (quote (1 2 3)))) x) ... ok
test 138:(let ((f (lambda () (quote (1 2 3))))) (f)) ... ok
test 139:(let ((f (lambda () (lambda () (quote (1 2 3)))))) ((f))) ... ok
test 140:"Hello World" ... ok
test 141:(quote ("Hello" "World")) ... ok
Performing vector constructor tests ...
test 142:(vector-length (vector 10)) ... ok
test 143:(let ((v (vector 11))) (vector-length v)) ... ok
test 144:(let ((v (vector 12))) (vector-ref v 0)) ... ok
test 145:(let ((v (vector 13))) (vector-set! v 0 99) (vector-ref v 0)) ... ok
test 146:(let ((v (vector 14))) (vector-set! v 0 #t) (vector-ref v 0)) ... ok
Performing set! tests ...
test 147:(let ((x 12)) (set! x 13) x) ... ok
test 148:(let ((x 12)) (set! x (fxadd1 x)) x) ... ok
test 149:(let ((x 12)) (let ((x #f)) (set! x 14)) x) ... ok
test 150:(let ((x 12)) (let ((y (let ((x #f)) (set! x 14)))) x)) ... ok
test 151:(let ((f #f)) (let ((g (lambda () f))) (set! f 10) (g))) ... ok
test 152:(let ((f (lambda (x) (set! x (fxadd1 x)) x))) (f 12)) ... ok
test 153:(let ((x 10)) (let ((f (lambda (x) (set! x (fxadd1 x)) x))) (cons x (f x)))) ... ok
test 154:(let ((t #f)) (let ((locative (cons (lambda () t) (lambda (n) (set! t n))))) ((cdr locative) 17) ((car locative)))) ... ok
test 155:(let ((locative (let ((t #f)) (cons (lambda () t) (lambda (n) (set! t n)))))) ((cdr locative) 17) ((car locative))) ... ok
test 156:(let ((make-counter (lambda () (let ((counter -1)) (lambda () (set! counter (fxadd1 counter)) counter))))) (let ((c0 (make-counter)) (c1 (make-counter))) (c0) (cons (c0) (c1)))) ... ok
test 157:(let ((fact #f)) (set! fact (lambda (n) (if (fxzero? n) 1 (fx* n (fact (fxsub1 n)))))) (fact 5)) ... ok
test 158:(let ((fact #f)) ((begin (set! fact (lambda (n) (if (fxzero? n) 1 (fx* n (fact (fxsub1 n)))))) fact) 5)) ... ok
Performing procedure? tests ...
test 159:(procedure? (lambda (x) x)) ... ok
test 160:(let ((f (lambda (x) x))) (procedure? f)) ... ok
test 161:(procedure? (make-vector 0)) ... ok
test 162:(procedure? (make-string 0)) ... ok
test 163:(procedure? (cons 1 2)) ... ok
test 164:(procedure? #\S) ... ok
test 165:(procedure? ()) ... ok
test 166:(procedure? #t) ... ok
test 167:(procedure? #f) ... ok
test 168:(string? (lambda (x) x)) ... ok
test 169:(vector? (lambda (x) x)) ... ok
test 170:(boolean? (lambda (x) x)) ... ok
test 171:(null? (lambda (x) x)) ... ok
test 172:(not (lambda (x) x)) ... ok
Performing applying thunks tests ...
test 173:(let ((f (lambda () 12))) (f)) ... ok
test 174:(let ((f (lambda () (fx+ 12 13)))) (f)) ... ok
test 175:(let ((f (lambda () 13))) (fx+ (f) (f))) ... ok
test 176:(let ((f (lambda () (let ((g (lambda () (fx+ 2 3)))) (fx* (g) (g)))))) (fx+ (f) (f))) ... ok
test 177:(let ((f (lambda () (let ((f (lambda () (fx+ 2 3)))) (fx* (f) (f)))))) (fx+ (f) (f))) ... ok
test 178:(let ((f (if (boolean? (lambda () 12)) (lambda () 13) (lambda () 14)))) (f)) ... ok
Performing parameter passing tests ...
test 179:(let ((f (lambda (x) x))) (f 12)) ... ok
test 180:(let ((f (lambda (x y) (fx+ x y)))) (f 12 13)) ... ok
test 181:(let ((f (lambda (z) (let ((g (lambda (x y) (fx+ x y)))) (g z 100))))) (f 1002)) ... ok
test 182:(let ((f (lambda (x) (let ((g (lambda (x y) (fx+ x y)))) (g x 100))))) (f 1001)) ... ok
test 183:(let ((f (lambda (x) (let ((g (lambda (x y) (fx+ x y)))) (g x 100))))) (f 1000)) ... ok
test 184:(let ((f (lambda (g) (g 2 13)))) (f (lambda (n m) (fx* n m)))) ... ok
test 185:(let ((f (lambda (g) (fx+ (g 10) (g 100))))) (f (lambda (x) (fx* x x)))) ... ok
test 186:(let ((f (lambda (f n m) (if (fxzero? n) m (f f (fxsub1 n) (fx* n m)))))) (f f 5 1)) ... ok
test 187:(let ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f f (fxsub1 n))))))) (f f 5)) ... ok
Performing closures tests ...
test 188:(let ((n 12)) (let ((f (lambda () n))) (f))) ... ok
test 189:(let ((n 12)) (let ((f (lambda (m) (fx+ n m)))) (f 100))) ... ok
test 190:(let ((f (lambda (f n m) (if (fxzero? n) m (f (fxsub1 n) (fx* n m)))))) (let ((g (lambda (g n m) (f (lambda (n m) (g g n m)) n m)))) (g g 5 1))) ... ok
test 191:(let ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f (fxsub1 n))))))) (let ((g (lambda (g n) (f (lambda (n) (g g n)) n)))) (g g 5))) ... ok
Performing begin/implicit-begin tests ...
test 192:(begin 12) ... ok
test 193:(begin 13 122) ... ok
test 194:(begin 123 2343 #t) ... ok
test 195:(let ((t (begin 12 (cons 1 2)))) (begin t t)) ... ok
test 196:(let ((t (begin 13 (cons 1 2)))) (cons 1 t) t) ... ok
test 197:(let ((t (cons 1 2))) (if (pair? t) (begin t) 12)) ... ok
Performing set-car! set-cdr! tests ...
test 198:(let ((x (cons 1 2))) (begin (set-cdr! x ()) x)) ... ok
test 199:(let ((x (cons 1 2))) (set-cdr! x ()) x) ... ok
test 200:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! x y) x) ... ok
test 201:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! y x) y) ... ok
test 202:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! y x) x) ... ok
test 203:(let ((x (cons 12 13)) (y (cons 14 15))) (set-cdr! x y) y) ... ok
test 204:(let ((x (let ((x (cons 1 2))) (set-car! x #t) (set-cdr! x #f) x))) (cons x x) x) ... ok
test 205:(let ((x (cons 1 2))) (set-cdr! x x) (set-car! (cdr x) x) (cons (eq? x (car x)) (eq? x (cdr x)))) ... ok
test 206:(let ((x #f)) (if (pair? x) (set-car! x 12) #f) x) ... ok
test 207:(let ((x #f)) (if (pair? #f) (set-car! #f 12) #f) x) ... ok
Performing eq? tests ...
test 208:(eq? 1 1) ... ok
test 209:(eq? 1 2) ... ok
test 210:(eq? #t 2) ... ok
test 211:(eq? #t #t) ... ok
test 212:(eq? () ()) ... ok
test 213:(eq? (cons 1 2) (cons 1 2)) ... ok
test 214:(let ((v (cons 1 2))) (eq? v v)) ... ok
Performing vectors tests ...
test 215:(vector? (make-vector 0)) ... ok
test 216:(vector-length (make-vector 12)) ... ok
test 217:(vector? (cons 1 2)) ... ok
test 218:(vector? 1287) ... ok
test 219:(vector? ()) ... ok
test 220:(vector? #t) ... ok
test 221:(vector? #f) ... ok
test 222:(pair? (make-vector 12)) ... ok
test 223:(null? (make-vector 12)) ... ok
test 224:(boolean? (make-vector 12)) ... ok
test 225:(make-vector 0) ... ok
test 226:(let ((v (make-vector 1))) (vector-set! v 0 #t) v) ... ok
test 227:(let ((v (make-vector 2))) (vector-set! v 0 #t) (vector-set! v 1 #f) v) ... ok
test 228:(let ((v (make-vector 2))) (vector-set! v 0 v) (vector-set! v 1 v) (eq? (vector-ref v 0) (vector-ref v 1))) ... ok
test 229:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (eq? y (vector-ref v 0))) ... ok
test 230:(cons 1 2) ... ok
test 231:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (pair? w)) ... ok
test 232:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (and (pair? w) (pair? (car w)))) ... ok
test 233:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (cdr w)) ... ok
test 234:(let ((w (let ((v (make-vector 1)) (y (cons 96 2))) y))) w) ... ok
test 235:(let ((w (let ((v (make-vector 1)) (y (cons 97 2))) (cons y (eq? y 0)) y))) w) ... ok
test 236:(let ((w (let ((v (make-vector 1)) (y (cons 97 3))) (vector-set! v 0 y) y))) w) ... ok
test 237:(let ((w (let ((v (make-vector 1)) (y (cons 98 2))) (vector-set! v 0 y) (cons y (eq? y 0)) y))) w) ... ok
test 238:(let ((w (let ((v (make-vector 1)) (y (cons 99 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (car w)) ... ok
test 239:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (eq? (car (car w)) 1)) ... ok
test 240:(let ((w (let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))))) (and (eq? (car (car w)) 1) (eq? (cdr (car w)) 2) (eq? (cdr w) #f))) ... ok
test 241:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y 0))) ... ok
test 242:(let ((v (make-vector 1)) (y (cons 1 2))) (vector-set! v 0 y) (cons y (eq? y (vector-ref v 0)))) ... ok
test 243:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector? v1))) ... ok
test 244:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (and (vector? v0) (vector? v1)))) ... ok
test 245:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (and (vector? v0) (vector? v1)))) ... ok
test 246:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) v0)) ... ok
test 247:(vector-length (make-vector 1)) ... ok
test 248:(let ((v0 (make-vector 2))) (vector-length v0)) ... ok
test 249:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-length v0)) ... ok
test 250:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (vector-length v1))) ... ok
test 251:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) v1)) ... ok
test 252:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (car (cons v0 v1)))) ... ok
test 253:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cdr (cons v0 v1)))) ... ok
test 254:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (cons v0 ())) ... ok
test 255:(let ((v0 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (cons #t v0)) ... ok
test 256:(let ((v0 (make-vector 2))) (let ((v1 (make-vector 2))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cons v0 v1))) ... ok
test 257:(let ((v0 (make-vector 3))) (let ((v1 (make-vector 3))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v0 2 150) (vector-set! v1 0 300) (vector-set! v1 1 400) (vector-set! v1 2 350) (cons v0 v1))) ... ok
test 258:(let ((n 2)) (let ((v0 (make-vector n))) (let ((v1 (make-vector n))) (vector-set! v0 0 100) (vector-set! v0 1 200) (vector-set! v1 0 300) (vector-set! v1 1 400) (cons v0 v1)))) ... ok
test 259:(let ((n 3)) (let ((v0 (make-vector n))) (let ((v1 (make-vector (vector-length v0)))) (vector-set! v0 (fx- (vector-length v0) 3) 100) (vector-set! v0 (fx- (vector-length v1) 2) 200) (vector-set! v0 (fx- (vector-length v0) 1) 150) (vector-set! v1 (fx- (vector-length v1) 3) 300) (vector-set! v1 (fx- (vector-length v0) 2) 400) (vector-set! v1 (fx- (vector-length v1) 1) 350) (cons v0 v1)))) ... ok
test 260:(let ((n 1)) (vector-set! (make-vector n) (fxsub1 n) (fx* n n)) n) ... ok
test 261:(let ((n 1)) (let ((v (make-vector 1))) (vector-set! v (fxsub1 n) n) (vector-ref v (fxsub1 n)))) ... ok
test 262:(let ((v0 (make-vector 1))) (vector-set! v0 0 1) (let ((v1 (make-vector 1))) (vector-set! v1 0 13) (vector-set! (if (vector? v0) v0 v1) (fxsub1 (vector-length (if (vector? v0) v0 v1))) (fxadd1 (vector-ref (if (vector? v0) v0 v1) (fxsub1 (vector-length (if (vector? v0) v0 v1)))))) (cons v0 v1))) ... ok
Performing strings tests ...
test 263:(make-string 0) ... ok
test 264:(string? (make-string 0)) ... ok
test 265:(let ((s (make-string 1))) (string-set! s 0 #\a) (string-ref s 0)) ... ok
test 266:(let ((s (make-string 2))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-ref s 1)) ... ok
test 267:(let ((s (make-string 3))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-ref s 2)) ... ok
test 268:(let ((s (make-string 4))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-set! s 3 #\d) (string-ref s 3)) ... ok
test 269:(let ((s (make-string 5))) (string-set! s 0 #\a) (string-set! s 1 #\b) (string-set! s 2 #\c) (string-set! s 3 #\d) (string-set! s 4 #\e) (string-ref s 3)) ... ok
test 270:(cons 1 2) ... ok
test 271:(cons (make-string 0) ()) ... ok
test 272:(let ((s (make-string 2))) (string-set! s 0 #\a) (string-set! s 1 #\b) (cons (string-ref s 0) (string-ref s 1))) ... ok
test 273:(let ((i 0)) (let ((s (make-string 1))) (string-set! s i #\a) (string-ref s i))) ... ok
test 274:(let ((i 0) (j 1)) (let ((s (make-string 2))) (string-set! s i #\a) (string-set! s j #\b) (string-ref s i))) ... ok
test 275:(let ((i 0) (j 1)) (let ((s (make-string 2))) (string-set! s i #\a) (string-set! s j #\b) (cons (string-ref s i) (string-ref s j)))) ... ok
test 276:(let ((i 0) (c #\a)) (let ((s (make-string 1))) (string-set! s i c) (string-ref s i))) ... ok
test 277:(string-length (make-string 12)) ... ok
test 278:(string? (make-vector 12)) ... ok
test 279:(string? (cons 1 2)) ... ok
test 280:(string? 1287) ... ok
test 281:(string? ()) ... ok
test 282:(string? #t) ... ok
test 283:(string? #f) ... ok
test 284:(pair? (make-string 12)) ... ok
test 285:(null? (make-string 12)) ... ok
test 286:(boolean? (make-string 12)) ... ok
test 287:(vector? (make-string 12)) ... ok
test 288:(make-string 0) ... ok
test 289:(let ((v (make-string 2))) (string-set! v 0 #\t) (string-set! v 1 #\f) v) ... ok
test 290:(let ((v (make-string 2))) (string-set! v 0 #\x) (string-set! v 1 #\x) (char=? (string-ref v 0) (string-ref v 1))) ... ok
test 291:(let ((v0 (make-string 3))) (let ((v1 (make-string 3))) (string-set! v0 0 #\a) (string-set! v0 1 #\b) (string-set! v0 2 #\c) (string-set! v1 0 #\d) (string-set! v1 1 #\e) (string-set! v1 2 #\f) (cons v0 v1))) ... ok
test 292:(let ((n 2)) (let ((v0 (make-string n))) (let ((v1 (make-string n))) (string-set! v0 0 #\a) (string-set! v0 1 #\b) (string-set! v1 0 #\c) (string-set! v1 1 #\d) (cons v0 v1)))) ... ok
test 293:(let ((n 1)) (string-set! (make-string n) (fxsub1 n) (fixnum->char 34)) n) ... ok
test 294:(let ((n 1)) (let ((v (make-string 1))) (string-set! v (fxsub1 n) (fixnum->char n)) (char->fixnum (string-ref v (fxsub1 n))))) ... ok
test 295:(let ((v0 (make-string 1))) (string-set! v0 0 #\a) (let ((v1 (make-string 1))) (string-set! v1 0 #\A) (string-set! (if (string? v0) v0 v1) (fxsub1 (string-length (if (string? v0) v0 v1))) (fixnum->char (fxadd1 (char->fixnum (string-ref (if (string? v0) v0 v1) (fxsub1 (string-length (if (string? v0) v0 v1)))))))) (cons v0 v1))) ... ok
test 296:(let ((s (make-string 1))) (string-set! s 0 #\") s) ... ok
test 297:(let ((s (make-string 1))) (string-set! s 0 #\\) s) ... ok
Performing cons tests ...
test 298:(fxadd1 0) ... ok
test 299:(pair? 12) ... ok
test 300:(pair? #t) ... ok
test 301:(pair? #f) ... ok
test 302:(pair? ()) ... ok
test 303:(cons 1 2) ... ok
test 304:(pair? (cons 1 2)) ... ok
test 305:(fixnum? (cons 12 43)) ... ok
test 306:(boolean? (cons 12 43)) ... ok
test 307:(null? (cons 12 43)) ... ok
test 308:(not (cons 12 43)) ... ok
test 309:(if (cons 12 43) 32 43) ... ok
test 310:(car (cons 1 23)) ... ok
test 311:(cdr (cons 43 123)) ... ok
test 312:(cons #t #f) ... ok
test 313:(car (cons #t #f)) ... ok
test 314:(cons 1 ()) ... ok
test 315:(cons 1 (cons 2 ())) ... ok
test 316:(cons (cons 12 3) (cons 45 6)) ... ok
test 317:(cons (cons 12 3) (cons #t #f)) ... ok
test 318:(car (car (cons (cons 12 3) (cons #t #f)))) ... ok
test 319:(cdr (car (cons (cons 12 3) (cons #t #f)))) ... ok
test 320:(car (cdr (cons (cons 12 3) (cons #t #f)))) ... ok
test 321:(cdr (cdr (cons (cons 12 3) (cons #t #f)))) ... ok
test 322:(cons 1 (cons 2 (cons 3 ()))) ... ok
test 323:(let ((x (let ((y (fx+ 1 2))) (fx* y y)))) (cons x (fx+ x x))) ... ok
test 324:(let ((t0 (cons 1 2)) (t1 (cons 3 4))) (let ((a0 (car t0)) (a1 (car t1)) (d0 (cdr t0)) (d1 (cdr t1))) (let ((t0 (cons a0 d1)) (t1 (cons a1 d0))) (cons t0 t1)))) ... ok
test 325:(let ((t (cons 1 2))) (let ((t t)) (let ((t t)) (let ((t t)) t)))) ... ok
test 326:(let ((t (let ((t (let ((t (let ((t (cons 1 2))) t))) t))) t))) t) ... ok
test 327:(let ((x ())) (let ((x (cons x x))) (let ((x (cons x x))) (let ((x (cons x x))) (cons x x))))) ... ok
test 328:(cons (let ((x #t)) (let ((y (cons x x))) (cons x y))) (cons (let ((x #f)) (let ((y (cons x x))) (cons y x))) ())) ... ok
Performing procedures tests ...
test 329:(letrec () 12) ... ok
test 330:(letrec () (let ((x 5)) (fx+ x x))) ... ok
test 331:(letrec ((f (lambda () 5))) 7) ... ok
test 332:(letrec ((f (lambda () 5))) (let ((x 12)) x)) ... ok
test 333:(letrec ((f (lambda () 5))) (app f)) ... ok
test 334:(letrec ((f (lambda () 5))) (f)) ... ok
test 335:(letrec ((f (lambda () 5))) (let ((x (f))) x)) ... ok
test 336:(letrec ((f (lambda () 5))) (fx+ 6 (app f))) ... ok
test 337:(letrec ((f (lambda () 5))) (fx+ (app f) 6)) ... ok
test 338:(letrec ((f (lambda () 5))) (fx+ (f) 6)) ... ok
test 339:(letrec ((f (lambda () 5))) (fx- 20 (f))) ... ok
test 340:(letrec ((f (lambda () 5))) (fx+ (f) (f))) ... ok
test 341:(letrec ((f (lambda () (fx+ 5 7))) (g (lambda () 13))) (fx+ (f) (g))) ... ok
test 342:(letrec ((f (lambda (x) (fx+ x 12)))) (f 13)) ... ok
test 343:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f 10))) ... ok
test 344:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f (f 0)))) ... ok
test 345:(letrec ((f (lambda (x y) (fx+ x y))) (g (lambda (x) (fx+ x 12)))) (f 16 (f (g 0) (fx+ 1 (g 0))))) ... ok
test 346:(letrec ((g (lambda (x y) (fx+ x y))) (f (lambda (x) (g x x)))) (f 12)) ... ok
test 347:(letrec ((f (lambda (x) (g x x))) (g (lambda (x y) (fx+ x y)))) (f 12)) ... ok
test 348:(let ((f (make-vector 1)) (g (make-vector 1))) (vector-set! f 0 (closure (x) (g) ((vector-ref g 0) x x))) (vector-set! g 0 (closure (x y) () (fx+ x y))) ((vector-ref f 0) 12)) ... ok
test 349:(letrec ((f (lambda (x) (if (fxzero? x) 1 (fx* x (f (fxsub1 x))))))) (f 5)) ... ok
test 350:(let ((f (make-vector 1))) (vector-set! f 0 (closure (x) (f) (if (fxzero? x) 1 (fx* x ((vector-ref f 0) (fxsub1 x)))))) ((vector-ref f 0) 5)) ... ok
test 351:(let ((e (make-vector 1)) (o (make-vector 1))) (vector-set! e 0 (closure (x) (o) (if (fxzero? x) #t ((vector-ref o 0) (fxsub1 x))))) (vector-set! o 0 (closure (x) (e) (if (fxzero? x) #f ((vector-ref e 0) (fxsub1 x))))) ((vector-ref e 0) 25)) ... ok
Performing deeply nested procedures tests ...
test 352:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 10 0)) ... ok
test 353:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 100 0)) ... ok
test 354:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 1000 0)) ... ok
test 355:(letrec ((sum (lambda (n ac) (if (fxzero? n) ac (sum (fxsub1 n) (fx+ n ac)))))) (sum 10000 0)) ... ok
Performing binary primitives tests ...
test 356:(fxlognot -7) ... ok
test 357:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 358:(fxlognot (fxlogor (fxlognot 7) (fxlognot 2))) ... ok
test 359:(fxlogand (fxlognot (fxlognot 12)) (fxlognot (fxlognot 12))) ... ok
test 360:(fx+ (fx+ 1 2) (fx+ 3 4)) ... ok
test 361:(fx+ (fx+ 1 2) (fx+ 3 -4)) ... ok
test 362:(fx+ (fx+ 1 2) (fx+ -3 4)) ... ok
test 363:(fx+ (fx+ 1 2) (fx+ -3 -4)) ... ok
test 364:(fx+ (fx+ 1 -2) (fx+ 3 4)) ... ok
test 365:(fx+ (fx+ 1 -2) (fx+ 3 -4)) ... ok
test 366:(fx+ (fx+ 1 -2) (fx+ -3 4)) ... ok
test 367:(fx+ (fx+ 1 -2) (fx+ -3 -4)) ... ok
test 368:(fx+ (fx+ -1 2) (fx+ 3 4)) ... ok
test 369:(fx+ (fx+ -1 2) (fx+ 3 -4)) ... ok
test 370:(fx+ (fx+ -1 2) (fx+ -3 4)) ... ok
test 371:(fx+ (fx+ -1 2) (fx+ -3 -4)) ... ok
test 372:(fx+ (fx+ -1 -2) (fx+ 3 4)) ... ok
test 373:(fx+ (fx+ -1 -2) (fx+ 3 -4)) ... ok
test 374:(fx+ (fx+ -1 -2) (fx+ -3 4)) ... ok
test 375:(fx+ (fx+ -1 -2) (fx+ -3 -4)) ... ok
test 376:(fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 377:(fx+ 1 (fx+ 2 (fx+ 3 (fx+ 4 (fx+ 5 (fx+ 6 (fx+ 7 (fx+ 8 9)))))))) ... ok
test 378:(fx+ (fx+ (fx+ (fx+ 1 2) (fx+ 3 4)) (fx+ (fx+ 5 6) (fx+ 7 8))) (fx+ (fx+ (fx+ 9 10) (fx+ 11 12)) (fx+ (fx+ 13 14) (fx+ 15 16)))) ... ok
test 379:(fx- (fx- 1 2) (fx- 3 4)) ... ok
test 380:(fx- (fx- 1 2) (fx- 3 -4)) ... ok
test 381:(fx- (fx- 1 2) (fx- -3 4)) ... ok
test 382:(fx- (fx- 1 2) (fx- -3 -4)) ... ok
test 383:(fx- (fx- 1 -2) (fx- 3 4)) ... ok
test 384:(fx- (fx- 1 -2) (fx- 3 -4)) ... ok
test 385:(fx- (fx- 1 -2) (fx- -3 4)) ... ok
test 386:(fx- (fx- 1 -2) (fx- -3 -4)) ... ok
test 387:(fx- (fx- -1 2) (fx- 3 4)) ... ok
test 388:(fx- (fx- -1 2) (fx- 3 -4)) ... ok
test 389:(fx- (fx- -1 2) (fx- -3 4)) ... ok
test 390:(fx- (fx- -1 2) (fx- -3 -4)) ... ok
test 391:(fx- (fx- -1 -2) (fx- 3 4)) ... ok
test 392:(fx- (fx- -1 -2) (fx- 3 -4)) ... ok
test 393:(fx- (fx- -1 -2) (fx- -3 4)) ... ok
test 394:(fx- (fx- -1 -2) (fx- -3 -4)) ... ok
test 395:(fx- (fx- (fx- (fx- (fx- (fx- (fx- (fx- 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 396:(fx- 1 (fx- 2 (fx- 3 (fx- 4 (fx- 5 (fx- 6 (fx- 7 (fx- 8 9)))))))) ... ok
test 397:(fx- (fx- (fx- (fx- 1 2) (fx- 3 4)) (fx- (fx- 5 6) (fx- 7 8))) (fx- (fx- (fx- 9 10) (fx- 11 12)) (fx- (fx- 13 14) (fx- 15 16)))) ... ok
test 398:(fx* (fx* (fx* (fx* 2 3) (fx* 4 5)) (fx* (fx* 6 7) (fx* 8 9))) (fx* (fx* (fx* 2 3) (fx* 2 3)) (fx* (fx* 2 3) (fx* 2 3)))) ... ok
test 399:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 400:(fxlognot (fxlogor (fxlognot 7) (fxlognot 2))) ... ok
test 401:(fxlogand (fxlognot (fxlognot 12)) (fxlognot (fxlognot 12))) ... ok
test 402:(fx= (fx+ 13 3) (fx+ 10 6)) ... ok
test 403:(fx= (fx+ 13 0) (fx+ 10 6)) ... ok
test 404:(fx= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 405:(fx< (fx+ 10 6) (fx+ 13 1)) ... ok
test 406:(fx< (fx+ 10 6) (fx+ 13 3)) ... ok
test 407:(fx< (fx+ 10 6) (fx+ 13 31)) ... ok
test 408:(fx< (fx+ 12 1) (fx+ -12 -1)) ... ok
test 409:(fx< (fx+ -12 -1) (fx+ 12 1)) ... ok
test 410:(fx<= (fx+ 10 6) (fx+ 13 1)) ... ok
test 411:(fx<= (fx+ 10 6) (fx+ 13 3)) ... ok
test 412:(fx<= (fx+ 10 6) (fx+ 13 31)) ... ok
test 413:(fx<= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 414:(fx<= (fx+ -12 -1) (fx+ 12 1)) ... ok
test 415:(fx> (fx+ 10 6) (fx+ 13 1)) ... ok
test 416:(fx> (fx+ 10 6) (fx+ 13 3)) ... ok
test 417:(fx> (fx+ 10 6) (fx+ 13 31)) ... ok
test 418:(fx> (fx+ 12 1) (fx+ -12 -1)) ... ok
test 419:(fx> (fx+ -12 -1) (fx+ 12 1)) ... ok
test 420:(fx>= (fx+ 10 6) (fx+ 13 1)) ... ok
test 421:(fx>= (fx+ 10 6) (fx+ 13 3)) ... ok
test 422:(fx>= (fx+ 10 6) (fx+ 13 31)) ... ok
test 423:(fx>= (fx+ 12 1) (fx+ -12 -1)) ... ok
test 424:(fx>= (fx+ -12 -1) (fx+ 12 1)) ... ok
Performing let tests ...
test 425:(let ((x 5)) x) ... ok
test 426:(let ((x (fx+ 1 2))) x) ... ok
test 427:(let ((x (fx+ 1 2))) (let ((y (fx+ 3 4))) (fx+ x y))) ... ok
test 428:(let ((x (fx+ 1 2))) (let ((y (fx+ 3 4))) (fx- y x))) ... ok
test 429:(let ((x (fx+ 1 2)) (y (fx+ 3 4))) (fx- y x)) ... ok
test 430:(let ((x (let ((y (fx+ 1 2))) (fx* y y)))) (fx+ x x)) ... ok
test 431:(let ((x (fx+ 1 2))) (let ((x (fx+ 3 4))) x)) ... ok
test 432:(let ((x (fx+ 1 2))) (let ((x (fx+ x 4))) x)) ... ok
test 433:(let ((t (let ((t (let ((t (let ((t (fx+ 1 2))) t))) t))) t))) t) ... ok
test 434:(let ((x 12)) (let ((x (fx+ x x))) (let ((x (fx+ x x))) (let ((x (fx+ x x))) (fx+ x x))))) ... ok
Performing let* tests ...
test 435:(let* ((x 5)) x) ... ok
test 436:(let ((x 1)) (let ((x (fx+ x 1)) (y (fx+ x 1))) y)) ... ok
test 437:(let* ((x 1)) (let* ((x (fx+ x 1)) (y (fx+ x 1))) y)) ... ok
Performing fx+ tests ...
test 438:(fx+ 1 2) ... ok
test 439:(fx+ 1 -2) ... ok
test 440:(fx+ -1 2) ... ok
test 441:(fx+ -1 -2) ... ok
test 442:(fx+ 536870911 -1) ... ok
test 443:(fx+ 536870910 1) ... ok
test 444:(fx+ -536870912 1) ... ok
test 445:(fx+ -536870911 -1) ... ok
test 446:(fx+ 536870911 -536870912) ... ok
test 447:(fx+ 1 (fx+ 2 3)) ... ok
test 448:(fx+ 1 (fx+ 2 -3)) ... ok
test 449:(fx+ 1 (fx+ -2 3)) ... ok
test 450:(fx+ 1 (fx+ -2 -3)) ... ok
test 451:(fx+ -1 (fx+ 2 3)) ... ok
test 452:(fx+ -1 (fx+ 2 -3)) ... ok
test 453:(fx+ -1 (fx+ -2 3)) ... ok
test 454:(fx+ -1 (fx+ -2 -3)) ... ok
test 455:(fx+ (fx+ 1 2) 3) ... ok
test 456:(fx+ (fx+ 1 2) -3) ... ok
test 457:(fx+ (fx+ 1 -2) 3) ... ok
test 458:(fx+ (fx+ 1 -2) -3) ... ok
test 459:(fx+ (fx+ -1 2) 3) ... ok
test 460:(fx+ (fx+ -1 2) -3) ... ok
test 461:(fx+ (fx+ -1 -2) 3) ... ok
test 462:(fx+ (fx+ -1 -2) -3) ... ok
test 463:(fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ (fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 464:(fx+ 1 (fx+ 2 (fx+ 3 (fx+ 4 (fx+ 5 (fx+ 6 (fx+ 7 (fx+ 8 9)))))))) ... ok
Performing fx- tests ...
test 465:(fx- 1 2) ... ok
test 466:(fx- 1 -2) ... ok
test 467:(fx- -1 2) ... ok
test 468:(fx- -1 -2) ... ok
test 469:(fx- 536870910 -1) ... ok
test 470:(fx- 536870911 1) ... ok
test 471:(fx- -536870911 1) ... ok
test 472:(fx- -536870912 -1) ... ok
test 473:(fx- 1 536870911) ... ok
test 474:(fx- -1 536870911) ... ok
test 475:(fx- 1 -536870910) ... ok
test 476:(fx- -1 -536870912) ... ok
test 477:(fx- 536870911 536870911) ... ok
test 478:(fx- -536870911 -536870912) ... ok
test 479:(fx- 1 (fx- 2 3)) ... ok
test 480:(fx- 1 (fx- 2 -3)) ... ok
test 481:(fx- 1 (fx- -2 3)) ... ok
test 482:(fx- 1 (fx- -2 -3)) ... ok
test 483:(fx- -1 (fx- 2 3)) ... ok
test 484:(fx- -1 (fx- 2 -3)) ... ok
test 485:(fx- -1 (fx- -2 3)) ... ok
test 486:(fx- -1 (fx- -2 -3)) ... ok
test 487:(fx- 0 (fx- -2 -3)) ... ok
test 488:(fx- (fx- 1 2) 3) ... ok
test 489:(fx- (fx- 1 2) -3) ... ok
test 490:(fx- (fx- 1 -2) 3) ... ok
test 491:(fx- (fx- 1 -2) -3) ... ok
test 492:(fx- (fx- -1 2) 3) ... ok
test 493:(fx- (fx- -1 2) -3) ... ok
test 494:(fx- (fx- -1 -2) 3) ... ok
test 495:(fx- (fx- -1 -2) -3) ... ok
test 496:(fx- (fx- (fx- (fx- (fx- (fx- (fx- (fx- 1 2) 3) 4) 5) 6) 7) 8) 9) ... ok
test 497:(fx- 1 (fx- 2 (fx- 3 (fx- 4 (fx- 5 (fx- 6 (fx- 7 (fx- 8 9)))))))) ... ok
Performing fx* tests ...
test 498:(fx* 2 3) ... ok
test 499:(fx* 2 -3) ... ok
test 500:(fx* -2 3) ... ok
test 501:(fx* -2 -3) ... ok
test 502:(fx* 536870911 1) ... ok
test 503:(fx* 536870911 -1) ... ok
test 504:(fx* -536870912 1) ... ok
test 505:(fx* -536870911 -1) ... ok
test 506:(fx* 2 (fx* 3 4)) ... ok
test 507:(fx* (fx* 2 3) 4) ... ok
test 508:(fx* (fx* (fx* (fx* (fx* 2 3) 4) 5) 6) 7) ... ok
test 509:(fx* 2 (fx* 3 (fx* 4 (fx* 5 (fx* 6 7))))) ... ok
Performing fxlogand and fxlogor tests ...
test 510:(fxlogor 3 16) ... ok
test 511:(fxlogor 3 5) ... ok
test 512:(fxlogor 3 7) ... ok
test 513:(fxlognot (fxlogor (fxlognot 7) 1)) ... ok
test 514:(fxlognot (fxlogor 1 (fxlognot 7))) ... ok
test 515:(fxlogand 3 7) ... ok
test 516:(fxlogand 3 5) ... ok
test 517:(fxlogand 2346 (fxlognot 2346)) ... ok
test 518:(fxlogand (fxlognot 2346) 2346) ... ok
test 519:(fxlogand 2376 2376) ... ok
Performing fx= tests ...
test 520:(fx= 12 13) ... ok
test 521:(fx= 12 12) ... ok
test 522:(fx= 16 (fx+ 13 3)) ... ok
test 523:(fx= 16 (fx+ 13 13)) ... ok
test 524:(fx= (fx+ 13 3) 16) ... ok
test 525:(fx= (fx+ 13 13) 16) ... ok
Performing fx< tests ...
test 526:(fx< 12 13) ... ok
test 527:(fx< 12 12) ... ok
test 528:(fx< 13 12) ... ok
test 529:(fx< 16 (fx+ 13 1)) ... ok
test 530:(fx< 16 (fx+ 13 3)) ... ok
test 531:(fx< 16 (fx+ 13 13)) ... ok
test 532:(fx< (fx+ 13 1) 16) ... ok
test 533:(fx< (fx+ 13 3) 16) ... ok
test 534:(fx< (fx+ 13 13) 16) ... ok
Performing fx<= tests ...
test 535:(fx<= 12 13) ... ok
test 536:(fx<= 12 12) ... ok
test 537:(fx<= 13 12) ... ok
test 538:(fx<= 16 (fx+ 13 1)) ... ok
test 539:(fx<= 16 (fx+ 13 3)) ... ok
test 540:(fx<= 16 (fx+ 13 13)) ... ok
test 541:(fx<= (fx+ 13 1) 16) ... ok
test 542:(fx<= (fx+ 13 3) 16) ... ok
test 543:(fx<= (fx+ 13 13) 16) ... ok
Performing fx> tests ...
test 544:(fx> 12 13) ... ok
test 545:(fx> 12 12) ... ok
test 546:(fx> 13 12) ... ok
test 547:(fx> 16 (fx+ 13 1)) ... ok
test 548:(fx> 16 (fx+ 13 3)) ... ok
test 549:(fx> 16 (fx+ 13 13)) ... ok
test 550:(fx> (fx+ 13 1) 16) ... ok
test 551:(fx> (fx+ 13 3) 16) ... ok
test 552:(fx> (fx+ 13 13) 16) ... ok
Performing fx>= tests ...
test 553:(fx>= 12 13) ... ok
test 554:(fx>= 12 12) ... ok
test 555:(fx>= 13 12) ... ok
test 556:(fx>= 16 (fx+ 13 1)) ... ok
test 557:(fx>= 16 (fx+ 13 3)) ... ok
test 558:(fx>= 16 (fx+ 13 13)) ... ok
test 559:(fx>= (fx+ 13 1) 16) ... ok
test 560:(fx>= (fx+ 13 3) 16) ... ok
test 561:(fx>= (fx+ 13 13) 16) ... ok
Performing if tests ...
test 562:(if (fx= 12 13) 12 13) ... ok
test 563:(if (fx= 12 12) 13 14) ... ok
test 564:(if (fx< 12 13) 12 13) ... ok
test 565:(if (fx< 12 12) 13 14) ... ok
test 566:(if (fx< 13 12) 13 14) ... ok
test 567:(if (fx<= 12 13) 12 13) ... ok
test 568:(if (fx<= 12 12) 12 13) ... ok
test 569:(if (fx<= 13 12) 13 14) ... ok
test 570:(if (fx> 12 13) 12 13) ... ok
test 571:(if (fx> 12 12) 12 13) ... ok
test 572:(if (fx> 13 12) 13 14) ... ok
test 573:(if (fx>= 12 13) 12 13) ... ok
test 574:(if (fx>= 12 12) 12 13) ... ok
test 575:(if (fx>= 13 12) 13 14) ... ok
Performing if tests ...
test 576:(if #t 12 13) ... ok
test 577:(if #f 12 13) ... ok
test 578:(if 0 12 13) ... ok
test 579:(if () 43 ()) ... ok
test 580:(if #t (if 12 13 4) 17) ... ok
test 581:(if #f 12 (if #f 13 4)) ... ok
test 582:(if #\X (if 1 2 3) (if 4 5 6)) ... ok
test 583:(if (not (boolean? #t)) 15 (boolean? #f)) ... ok
test 584:(if (if (char? #\a) (boolean? #\b) (fixnum? #\c)) 119 -23) ... ok
test 585:(if (if (if (not 1) (not 2) (not 3)) 4 5) 6 7) ... ok
test 586:(if (not (if (if (not 1) (not 2) (not 3)) 4 5)) 6 7) ... ok
test 587:(not (if (not (if (if (not 1) (not 2) (not 3)) 4 5)) 6 7)) ... ok
test 588:(if (char? 12) 13 14) ... ok
test 589:(if (char? #\a) 13 14) ... ok
test 590:(fxadd1 (if (fxsub1 1) (fxsub1 13) 14)) ... ok
Performing and tests ...
test 591:(and) ... ok
test 592:(and #t) ... ok
test 593:(and #f) ... ok
test 594:(and #t #t) ... ok
test 595:(and #t #f) ... ok
test 596:(and #t #t #t) ... ok
test 597:(and #t #t #t #t #t #t #t) ... ok
test 598:(and #t #t #t #f #t #t #t) ... ok
test 599:(and (char? 12) (boolean? #f)) ... ok
test 600:(and (char? #\a) (boolean? #f)) ... ok
test 601:(and (char? #\newline) (not #f)) ... ok
test 602:(and (char? #\newline) (not #f) (not ())) ... ok
Performing or tests ...
test 603:(or) ... ok
test 604:(or #t) ... ok
test 605:(or #f) ... ok
test 606:(or #t #f) ... ok
test 607:(or #f #t) ... ok
test 608:(or #f #f #f #f #f #f #f #f #f #f #f #t) ... ok
test 609:(or #f #f #f #f #f (char? 14) (boolean? #\a)) ... ok
test 610:(and (or (char? 12) (char? #\a)) (or (boolean? 13) (boolean? #f))) ... ok
test 611:(or (char? #\a) (boolean? #f)) ... ok
Performing fxadd1 tests ...
test 612:(fxadd1 0) ... ok
test 613:(fxadd1 -1) ... ok
test 614:(fxadd1 1) ... ok
test 615:(fxadd1 -100) ... ok
test 616:(fxadd1 1000) ... ok
test 617:(fxadd1 536870910) ... ok
test 618:(fxadd1 -536870912) ... ok
test 619:(fxadd1 (fxadd1 0)) ... ok
test 620:(fxadd1 (fxadd1 (fxadd1 (fxadd1 (fxadd1 (fxadd1 12)))))) ... ok
Performing fixnum->char and char->fixnum tests ...
test 621:(fixnum->char 65) ... ok
test 622:(fixnum->char 97) ... ok
test 623:(fixnum->char 122) ... ok
test 624:(fixnum->char 90) ... ok
test 625:(fixnum->char 48) ... ok
test 626:(fixnum->char 57) ... ok
test 627:(char->fixnum #\A) ... ok
test 628:(char->fixnum #\a) ... ok
test 629:(char->fixnum #\z) ... ok
test 630:(char->fixnum #\Z) ... ok
test 631:(char->fixnum #\0) ... ok
test 632:(char->fixnum #\9) ... ok
test 633:(char->fixnum (fixnum->char 12)) ... ok
test 634:(fixnum->char (char->fixnum #\x)) ... ok
Performing fixnum? tests ...
test 635:(fixnum? 0) ... ok
test 636:(fixnum? 1) ... ok
test 637:(fixnum? -1) ... ok
test 638:(fixnum? 37287) ... ok
test 639:(fixnum? -23873) ... ok
test 640:(fixnum? 536870911) ... ok
test 641:(fixnum? -536870912) ... ok
test 642:(fixnum? #t) ... ok
test 643:(fixnum? #f) ... ok
test 644:(fixnum? ()) ... ok
test 645:(fixnum? #\Q) ... ok
test 646:(fixnum? (fixnum? 12)) ... ok
test 647:(fixnum? (fixnum? #f)) ... ok
test 648:(fixnum? (fixnum? #\A)) ... ok
test 649:(fixnum? (char->fixnum #\r)) ... ok
test 650:(fixnum? (fixnum->char 12)) ... ok
Performing fxzero? tests ...
test 651:(fxzero? 0) ... ok
test 652:(fxzero? 1) ... ok
test 653:(fxzero? -1) ... ok
Performing null? tests ...
test 654:(null? ()) ... ok
test 655:(null? #f) ... ok
test 656:(null? #t) ... ok
test 657:(null? (null? ())) ... ok
test 658:(null? #\a) ... ok
test 659:(null? 0) ... ok
test 660:(null? -10) ... ok
test 661:(null? 10) ... ok
Performing boolean? tests ...
test 662:(boolean? #t) ... ok
test 663:(boolean? #f) ... ok
test 664:(boolean? 0) ... ok
test 665:(boolean? 1) ... ok
test 666:(boolean? -1) ... ok
test 667:(boolean? ()) ... ok
test 668:(boolean? #\a) ... ok
test 669:(boolean? (boolean? 0)) ... ok
test 670:(boolean? (fixnum? (boolean? 0))) ... ok
Performing char? tests ...
test 671:(char? #\a) ... ok
test 672:(char? #\Z) ... ok
test 673:(char? #\newline) ... ok
test 674:(char? #t) ... ok
test 675:(char? #f) ... ok
test 676:(char? ()) ... ok
test 677:(char? (char? #t)) ... ok
test 678:(char? 0) ... ok
test 679:(char? 23870) ... ok
test 680:(char? -23789) ... ok
Performing not tests ...
test 681:(not #t) ... ok
test 682:(not #f) ... ok
test 683:(not 15) ... ok
test 684:(not ()) ... ok
test 685:(not #\A) ... ok
test 686:(not (not #t)) ... ok
test 687:(not (not #f)) ... ok
test 688:(not (not 15)) ... ok
test 689:(not (fixnum? 15)) ... ok
test 690:(not (fixnum? #f)) ... ok
Performing fxlognot tests ...
test 691:(fxlognot 0) ... ok
test 692:(fxlognot -1) ... ok
test 693:(fxlognot 1) ... ok
test 694:(fxlognot -2) ... ok
test 695:(fxlognot 536870911) ... ok
test 696:(fxlognot -536870912) ... ok
test 697:(fxlognot (fxlognot 237463)) ... ok
Performing immediate constants tests ...
test 698:#f ... ok
test 699:#t ... ok
test 700:() ... ok
test 701:#\tab ... ok
test 702:#\newline ... ok
test 703:#\return ... ok
test 704:#\space ... ok
test 705:#\! ... ok
test 706:#\" ... ok
test 707:#\# ... ok
test 708:#\$ ... ok
test 709:#\% ... ok
test 710:#\& ... ok
test 711:#\' ... ok
test 712:#\( ... ok
test 713:#\) ... ok
test 714:#\* ... ok
test 715:#\+ ... ok
test 716:#\, ... ok
test 717:#\- ... ok
test 718:#\. ... ok
test 719:#\/ ... ok
test 720:#\0 ... ok
test 721:#\1 ... ok
test 722:#\2 ... ok
test 723:#\3 ... ok
test 724:#\4 ... ok
test 725:#\5 ... ok
test 726:#\6 ... ok
test 727:#\7 ... ok
test 728:#\8 ... ok
test 729:#\9 ... ok
test 730:#\: ... ok
test 731:#\; ... ok
test 732:#\< ... ok
test 733:#\= ... ok
test 734:#\> ... ok
test 735:#\? ... ok
test 736:#\@ ... ok
test 737:#\A ... ok
test 738:#\B ... ok
test 739:#\C ... ok
test 740:#\D ... ok
test 741:#\E ... ok
test 742:#\F ... ok
test 743:#\G ... ok
test 744:#\H ... ok
test 745:#\I ... ok
test 746:#\J ... ok
test 747:#\K ... ok
test 748:#\L ... ok
test 749:#\M ... ok
test 750:#\N ... ok
test 751:#\O ... ok
test 752:#\P ... ok
test 753:#\Q ... ok
test 754:#\R ... ok
test 755:#\S ... ok
test 756:#\T ... ok
test 757:#\U ... ok
test 758:#\V ... ok
test 759:#\W ... ok
test 760:#\X ... ok
test 761:#\Y ... ok
test 762:#\Z ... ok
test 763:#\[ ... ok
test 764:#\\ ... ok
test 765:#\] ... ok
test 766:#\^ ... ok
test 767:#\_ ... ok
test 768:#\` ... ok
test 769:#\a ... ok
test 770:#\b ... ok
test 771:#\c ... ok
test 772:#\d ... ok
test 773:#\e ... ok
test 774:#\f ... ok
test 775:#\g ... ok
test 776:#\h ... ok
test 777:#\i ... ok
test 778:#\j ... ok
test 779:#\k ... ok
test 780:#\l ... ok
test 781:#\m ... ok
test 782:#\n ... ok
test 783:#\o ... ok
test 784:#\p ... ok
test 785:#\q ... ok
test 786:#\r ... ok
test 787:#\s ... ok
test 788:#\t ... ok
test 789:#\u ... ok
test 790:#\v ... ok
test 791:#\w ... ok
test 792:#\x ... ok
test 793:#\y ... ok
test 794:#\z ... ok
test 795:#\{ ... ok
test 796:#\| ... ok
test 797:#\} ... ok
test 798:#\~ ... ok
Performing integers tests ...
test 799:0 ... ok
test 800:1 ... ok
test 801:-1 ... ok
test 802:10 ... ok
test 803:-10 ... ok
test 804:2736 ... ok
test 805:-2736 ... ok
test 806:536870911 ... ok
test 807:-536870912 ... ok
passed all 808 tests
> 
