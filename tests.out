Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing remainder/modulo/quotient tests ...
test 0:#\tab ... ok
test 1:(fxquotient 16 4) ... ok
test 2:(fxquotient 5 2) ... ok
test 3:(fxquotient -45 7) ... ok
test 4:(fxquotient 10 -3) ... ok
test 5:(fxquotient -17 -9) ... ok
test 6:(fxremainder 16 4) ... ok
test 7:(fxremainder 5 2) ... ok
test 8:(fxremainder -45 7) ... ok
test 9:(fxremainder 10 -3) ... ok
test 10:(fxremainder -17 -9) ... ok
Performing write-char tests ...
test 11:(begin (exit)) ... ok
test 12:(begin (vector-ref (current-output-port) 0)) ... ok
test 13:(begin (port-size (current-output-port))) ... ok
test 14:(begin (port-ndx (current-output-port))) ... ok
test 15:(begin (port-fd (current-output-port))) ... ok
test 16:(begin (flush-output-port (current-output-port)) (exit)) ... ok
test 17:(begin (write-char #\b) (exit)) ... ok
test 18:(eq? standard-out standard-out) ... ok
test 19:(let ((p standard-out)) (port-ndx p)) ... ok
test 20:(let ((p standard-out)) (port-ndx-add1 p) (port-ndx p)) ... ok
test 21:(let ((p standard-out)) (write-char #\v) (port-ndx p)) ... ok
test 22:(let ((p (current-output-port))) (write-char #\w) (port-ndx p)) ... ok
test 23:(begin (current-output-port) (write-char #\w) (port-ndx (current-output-port))) ... ok
test 24:(begin (write-char #\w) (port-ndx (current-output-port))) ... ok
test 25:(begin (write-char #\a) (write-char #\b) (write-char #\c) (write-char #\newline) (flush-output-port (current-output-port)) (exit)) ... ok
test 26:(begin (write-char #\a) (close-output-port (current-output-port)) (exit)) ... ok
test 27:(begin (write-char #\H) (write-char #\e) (write-char #\l) (write-char #\l) (write-char #\o) (write-char #\space) (flush-output-port) (write-char #\W) (write-char #\o) (write-char #\r) (write-char #\l) (write-char #\d) (write-char #\!) (flush-output-port (current-output-port)) (exit)) ... ok
Performing write/display tests ...
test 28:(fx+ -536870911 -1) ... ok
test 29:(begin (write #\a) (exit)) ... ok
test 30:(begin (write #t) (exit)) ... ok
test 31:(begin (write (quote ())) (exit)) ... ok
test 32:(begin (write (quote (1 2 3))) (exit)) ...> 
