Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing procedures tests ...
test 0:(letrec () 12) ... ok
test 1:(letrec () (let ((x 5)) (fx+ x x))) ... ok
test 2:(letrec ((f (lambda () 5))) 7) ... ok
test 3:(letrec ((f (lambda () 5))) (let ((x 12)) x)) ... ok
test 4:(letrec ((f (lambda () 5))) (app f)) ... ok
test 5:(letrec ((f (lambda () 5))) (f)) ... ok
test 6:(letrec ((f (lambda () 5))) (let ((x (f))) x)) ... ok
test 7:(letrec ((f (lambda () 5))) (fx+ 6 (app f))) ... ok
test 8:(letrec ((f (lambda () 5))) (fx+ (app f) 6)) ... ok
test 9:(letrec ((f (lambda () 5))) (fx+ (f) 6)) ... ok
test 10:(letrec ((f (lambda () 5))) (fx- 20 (f))) ... ok
test 11:(letrec ((f (lambda () 5))) (fx+ (f) (f))) ... ok
test 12:(letrec ((f (lambda () (fx+ 5 7))) (g (lambda () 13))) (fx+ (f) (g))) ... ok
test 13:(letrec ((f (lambda (x) (fx+ x 12)))) (f 13)) ... ok
test 14:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f 10))) ... ok
test 15:(letrec ((f (lambda (x) (fx+ x 12)))) (f (f (f 0)))) ... ok
test 16:(letrec ((f (lambda (x y) (fx+ x y))) (g (lambda (x) (fx+ x 12)))) (f 16 (f (g 0) (fx+ 1 (g 0))))) ... ok
test 17:(letrec ((f (lambda (x) (g x x))) (g (lambda (x y) (fx+ x y)))) (f 12)) ... ok
test 18:(letrec ((f (lambda (x) (if (fxzero? x) 1 (fx* x (f (fxsub1 x))))))) (f 5)) ... ok
test 19:(letrec ((e (lambda (x) (if (fxzero? x) #t (o (fxsub1 x))))) (o (lambda (x) (if (fxzero? x) #f (e (fxsub1 x)))))) (e 25)) ... ok
passed all 20 tests
> 
