Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing vector constructor tests ...
test 0:(vector-length (vector 10)) ... ok
test 1:(let ((v (vector 11))) (vector-length v)) ... ok
test 2:(let ((v (vector 12))) (vector-ref v 0)) ... ok
test 3:(let ((v (vector 13))) (vector-set! v 0 99) (vector-ref v 0)) ... ok
test 4:(let ((v (vector 14))) (vector-set! v 0 #t) (vector-ref v 0)) ... ok
Performing set! tests ...
test 5:(let ((x 12)) (set! x 13) x) ... ok
test 6:(let ((x 12)) (set! x (fxadd1 x)) x) ... ok
test 7:(let ((x 12)) (let ((x #f)) (set! x 14)) x) ... ok
test 8:(let ((x 12)) (let ((y (let ((x #f)) (set! x 14)))) x)) ... ok
test 9:(let ((f #f)) (let ((g (lambda () f))) (set! f 10) (g))) ... ok
test 10:(let ((f (lambda (x) (set! x (fxadd1 x)) x))) (f 12)) ... ok
test 11:(let ((x 10)) (let ((f (lambda (x) (set! x (fxadd1 x)) x))) (cons x (f x)))) ... ok
test 12:(let ((t #f)) (let ((locative (cons (lambda () t) (lambda (n) (set! t n))))) ((cdr locative) 17) ((car locative)))) ... ok
test 13:(let ((locative (let ((t #f)) (cons (lambda () t) (lambda (n) (set! t n)))))) ((cdr locative) 17) ((car locative))) ... ok
test 14:(let ((make-counter (lambda () (let ((counter -1)) (lambda () (set! counter (fxadd1 counter)) counter))))) (let ((c0 (make-counter)) (c1 (make-counter))) (c0) (cons (c0) (c1)))) ...> 
