Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing letrec tests ...
test 0:(letrec () 12) ... ok
test 1:(letrec ((f 12)) f) ... ok
test 2:(letrec ((f 12) (g 13)) (fx+ f g)) ... ok
test 3:(letrec ((fact (lambda (n) (if (fxzero? n) 1 (fx* n (fact (fxsub1 n))))))) (fact 5)) ... ok
test 4:(letrec ((f 12) (g (lambda () f))) (g)) ... ok
test 5:(letrec ((f 12) (g (lambda (n) (set! f n)))) (g 130) f) ... ok
test 6:(letrec ((f (lambda (g) (set! f g) (f)))) (f (lambda () 12))) ... ok
test 7:(letrec ((f (cons (lambda () f) (lambda (x) (set! f x))))) (let ((g (car f))) ((cdr f) 100) (g))) ... ok
test 8:(letrec ((f (letrec ((g (lambda (x) (fx* x 2)))) (lambda (n) (g (fx* n 2)))))) (f 12)) ... ok
test 9:(letrec ((f (lambda (f n) (if (fxzero? n) 1 (fx* n (f f (fxsub1 n))))))) (f f 5)) ... ok
test 10:(let ((f (lambda (f) (lambda (n) (if (fxzero? n) 1 (fx* n (f (fxsub1 n)))))))) (letrec ((fix (lambda (f) (f (lambda (n) ((fix f) n)))))) ((fix f) 5))) ... ok
Performing and/or tests ...
test 11:(and) ... ok
test 12:(and 5) ... ok
test 13:(and #f) ... ok
test 14:(and 5 6) ... ok
test 15:(and #f ((lambda (x) (x x)) (lambda (x) (x x)))) ... ok
test 16:(or) ... ok
test 17:(or #t) ... ok
test 18:(or 5) ... ok
test 19:(or 1 2 3) ... ok
test 20:(or (cons 1 2) ((lambda (x) (x x)) (lambda (x) (x x)))) ... ok
test 21:(let ((if 12)) (or if 17)) ... ok
test 22:(let ((if 12)) (and if 17)) ... ok
test 23:(let ((t 1)) (and (begin (set! t (fxadd1 t)) t) t)) ... ok
test 24:(let ((t 1)) (or (begin (set! t (fxadd1 t)) t) t)) ... ok
Performing when/unless tests ...
test 25:(let ((x (cons 1 2))) (when (pair? x) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 26:(let ((x (cons 1 2))) (when (pair? x) (set-car! x (fx+ (car x) (cdr x))) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 27:(let ((x (cons 1 2))) (unless (fixnum? x) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
test 28:(let ((x (cons 1 2))) (unless (fixnum? x) (set-car! x (fx+ (car x) (cdr x))) (set-car! x (fx+ (car x) (cdr x)))) x) ... ok
Performing cond tests ...
test 29:(cond (1 2) (else 3)) ...> 
