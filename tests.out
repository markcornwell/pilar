Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> Performing begin/implicit-begin tests ...
test 0:(begin 12) ... ok
test 1:(begin 13 122) ... ok
test 2:(begin 123 2343 #t) ... ok
test 3:(let ((t (begin 12 (cons 1 2)))) (begin t t)) ... ok
test 4:(let ((t (begin 13 (cons 1 2)))) (cons 1 t) t) ... ok
test 5:(let ((t (cons 1 2))) (if (pair? t) (begin t) 12)) ... ok
Performing vectors tests ...
test 6:(vector? (make-vector 0)) ... ok
test 7:(vector-length (make-vector 12)) ... ok
test 8:(vector? (cons 1 2)) ... ok
test 9:(vector? 1287) ... ok
test 10:(vector? ()) ... ok
test 11:(vector? #t) ... ok
test 12:(vector? #f) ... ok
test 13:(pair? (make-vector 12)) ... ok
test 14:(null? (make-vector 12)) ... ok
test 15:(boolean? (make-vector 12)) ... ok
test 16:(make-vector 0) ... ok
test 17:(let ((v (make-vector 1))) (vector-set! v 0 #t) v) ... ok
test 18:(let ((v (make-vector 2))) (vector-set! v 0 #t) (vector-set! v 1 #f) v) ... ok
test 19:(let ((v (make-vector 2))) (vector-set! v 0 v) (vector-set! v 1 v) (eq? (vector-ref v 0) (vector-ref v 1))) ...> 
